     
# Name: TREX RAPID RESPONSE (REMOTE)
# Description: Security Investigation tools
# Author: Josh Hochstettler (SHIFTY)
# 
#







#######################################################
#           List of features to add
####################################################### 
# 
#
#
#
#######################################################


$ErrorActionPreference = 'SilentlyContinue'


#######       FORM SETUP       #######

Add-Type -AssemblyName System.Windows.Forms
$wshell = New-Object -comObject Wscript.Shell
[System.Windows.Forms.Application]::EnableVisualStyles()
[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null

#######       FORM SIZE       #######

$Form = New-Object system.Windows.Forms.Form
$Form.ClientSize = '810,810' #Width,Height
$form.BackColor = ''
$Form.text = "T-REX RAPID RESPONSE (REMOTE PC VERSION)"
$Form.FormBorderStyle = 'Fixed3D'
$Form.MaximizeBox = $false
$Form.TopMost = $false


# Create an output box
$outputBox = New-Object System.Windows.Forms.TextBox
$outputBox.Multiline = $true
$outputBox.ScrollBars = "Vertical"
$outputBox.Location = New-Object System.Drawing.Point(250, 200)
$outputBox.Size = New-Object System.Drawing.Size(400, 300)
$form.Controls.Add($outputBox)




#Add a Background image to the form using Base64
$base64ImageString = "
"
$imageBytes = [Convert]::FromBase64String($base64ImageString)
$ms = New-Object IO.MemoryStream($imageBytes, 0, $imageBytes.Length)
$ms.Write($imageBytes, 0, $imageBytes.Length);
$objImage = [System.Drawing.Image]::FromStream($ms, $true)
$Form.BackgroundImage = $objImage
$Form.BackgroundImageLayout = "Stretch"
# None, Tile, Center, Stretch, Zoom


#Set icon for form using Base64 as an Embedded Image
$base64IconString = "iVBORw0KGgoAAAANSUhEUgAAAHUAAABiCAYAAABu15yfAAAACXBIWXMAAC4jAAAuIwF4pT92AAAKI2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDEgNzkuMTQ2Mjg5OSwgMjAyMy8wNi8yNS0yMDowMTo1NSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCAyNC43IChXaW5kb3dzKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMTItMTlUMTE6MDc6MjEtMDc6MDAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjMtMTItMTlUMTE6MDk6MTUtMDc6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDIzLTEyLTE5VDExOjA5OjE1LTA3OjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo5YzZlMjBhOC01OTczLWNkNDctYWMyOS02OWMxZjQxOWRmMDMiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo2ODkyZmI1MC0yMzE3LThiNDktYWUyNy05ZWQ5ZTVlN2NjODkiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpmOTQxMTJmOC04OWI2LWZhNGYtYjRlNy1mZGQ4ZTM2Y2ZlN2MiIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOmY5NDExMmY4LTg5YjYtZmE0Zi1iNGU3LWZkZDhlMzZjZmU3YyIgc3RFdnQ6d2hlbj0iMjAyMy0xMi0xOVQxMTowNzoyMS0wNzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDI0LjcgKFdpbmRvd3MpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo3YmE1ZmNjOC0zYjY1LWRiNGEtYWJmNi00YmJlMDRkOTRhMTUiIHN0RXZ0OndoZW49IjIwMjMtMTItMTlUMTE6MDc6MzUtMDc6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNC43IChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NmQyNDI1YjItNjc1My05MjRjLWE1M2MtOGY0YjZlNDdlMmMxIiBzdEV2dDp3aGVuPSIyMDIzLTEyLTE5VDExOjA5OjE1LTA3OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjQuNyAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNvbnZlcnRlZCIgc3RFdnQ6cGFyYW1ldGVycz0iZnJvbSBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIHRvIGltYWdlL3BuZyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iZGVyaXZlZCIgc3RFdnQ6cGFyYW1ldGVycz0iY29udmVydGVkIGZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCB0byBpbWFnZS9wbmciLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjljNmUyMGE4LTU5NzMtY2Q0Ny1hYzI5LTY5YzFmNDE5ZGYwMyIgc3RFdnQ6d2hlbj0iMjAyMy0xMi0xOVQxMTowOToxNS0wNzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDI0LjcgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo2ZDI0MjViMi02NzUzLTkyNGMtYTUzYy04ZjRiNmU0N2UyYzEiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6Zjk0MTEyZjgtODliNi1mYTRmLWI0ZTctZmRkOGUzNmNmZTdjIiBzdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6Zjk0MTEyZjgtODliNi1mYTRmLWI0ZTctZmRkOGUzNmNmZTdjIi8+IDxwaG90b3Nob3A6RG9jdW1lbnRBbmNlc3RvcnM+IDxyZGY6QmFnPiA8cmRmOmxpPnhtcC5kaWQ6ZGY3MTg4NDctYzBkMi1mNTQwLWI5MjAtOWFmMDJmYTdjN2JiPC9yZGY6bGk+IDxyZGY6bGk+eG1wLmRpZDpmOTQxMTJmOC04OWI2LWZhNGYtYjRlNy1mZGQ4ZTM2Y2ZlN2M8L3JkZjpsaT4gPC9yZGY6QmFnPiA8L3Bob3Rvc2hvcDpEb2N1bWVudEFuY2VzdG9ycz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6QXKptAABqjElEQVR4nOz9d5wdR5X3AX+r4813cp5Rzlm2Zcs5Z2OwDRjbBMPCkjGZXZKBZcFkTDDZCRzAxjhgnKMkK+cw0kiTc7o5dKp6/7gjw+7Cwr6bnvd9nhqVPjN9e3q6+1d1zqlT5/yOiEXD/Gdb4AdIZaCQaAQoAZqu/Zkz1cw/ged4aIBuWqAUgQyIxG00UyClAkBKRW1NRF+5tPGTjzxy4H4BxyzDAE3D832QlWtqmiBkmEigLH1MTUc3BEoKpJJoQqBpOkJJAukhFSilIYVCzNyXBkil8KXENExMdHzfRyJBE+iahkJDEwKlFEEQYJnm3/6SlMLxXRACTWigKseklCA0QCGUqrwjTQclMXR95nPQdL1yDwJkEKCUQAiBLgTMPMXxZvwH8ftva1JK4hGb175+EUoqlIJASpKJ0IrPfercL9/yjfp3fOlLL1zs+7LLsP7cgPl/7Xj7HwVVKSiXvGYgByqviT+Co2kao6NZls6u5opLF1EsuAAITZtvGz5f/OIZc+sbwxs++uFn3ui6wQvi/+H6F5tuWf8BEfIXmpJqRoApBAqUQtN1lDouGgRKgmHorZ/8xGnbLrhk6Xump9yq4dF0F4icpglAEQSKfNHnXe8+hdq6KMnqCFU1kflCK7xJqSKnrG+Pzl1Y+6Y/PNFz1HO8/WJG7AghMDQdBfhKogsNTROgBAqFEAIhNAQKpSQV4S5Q4o+Cq3IHFRGsazo6GlJKFGpGZFaeQ4gZga0Uuq7/h95TIAMQf7zG8esw8/OrR2fEsaZpM5+D0CqiHzHzOzP3ov0Z8ftfD6pQBD7UVJssWBSmvt6gocGkrt6gtc2Kfedb5910yUVzGq+7YcnZsWTN27duGWwoFItbdF1zLMukb3CaI0eG2bS5h989doDJqewJJ62ruzrwXZR0Wb2qyVh20rwrn/pDT1epWNovZh7u/4H6x/bfAiqAU5Zk8i7TWY/ptEcq7TE4VMyffmrDtQsWJppMvcxZZ3SEzjt/5frtO8bOGBqafto0jawQcKw7w+79KQ4cmuKii9reu3Zt7YkqCCo3r2DRglZ92bolVz7/9OFcLlfarP0/UP/F3/lv00xKQTErcYtapZc0ynl4ecNgEcD3wXUyrDvJ4Omn33zapZev3lYslc/QhCDwAzxHUS5qgIjOmLlUfk+g3DKnrmkw77z3pq81tlTd6Ev5rx7r/+72XwZqEEiCQP6LYwKQvkQQIAjQdHj2+aEXi8VSZXAqcJwidTVF7r//tY2vee2JjxSK7ukAmqHh+hoTk0WJ0BDo6MJmrKgYzZeIWz5z2kPmHXd++Bc11bEvljyP43Pw//b2nwZVAJ4fEI3a74xFw58rO17Ln4Ib+CCVhhI6hm1y6HD+pc4jWQxdIlUASuK4ZUJWnp///LqqCy484dfFol+HDECAbep4Pkw7FkLahI1mjhZGmfCmqY6VCVsRvvX1D3zWjphv9QMJCNT/5dhqyhf8Z3rJ8Vi7ZtEvXn7pH3+yadP7vvDxT5y72w5bf+f43qvKWgUg0DA0nXzG3fH8pqFhoYuKzlIKpQKEpqFkhltu+bvm888/9bfFXDGO52Domij4kh3jk5QDm4ioJmE0cGCqk0J4gqaWKVKpMTpaq3/iB/4t0vdf43ruecWiU1UulyuL9//LmvGfHdW+L5k9J9G0YpUGCL52y9n1V7524U8/9aln3rbhpaNvFogeTdcI/ADD0hGamHhl2/ATPZn5b68WIANFNBRhYloRj9RhmXk+8+k3nTE4NPZm15v84aIlST/nwHQ5xbHsFEuq5lDDPIrGYTYc3E56wOPOB/vx/bh1w/Vv+sQJ69Yxa9YsjnQdmbz/N/cf3Ld7/1tKZafP1E1MoyKYlFT4gY+c8UZpmnjVWFESXMfDxWuhIoiyBOQwJJpu/ede1v9QM5T+nzMxTNNm4ytdXxzs67ugrS1m+F6a09ZX88xT1532la9v3f6lLzz7Dtf1f2fbJgqFHjbp6ckcyJYhamv0TPs0RmchtCJDo4doazwR4Re56Ny1szZseYFYMlo9UMiio+jNDiP1ndiqnYZwO3uHwxT6z+DH3zmDdSev/de3VnfTBz925osbX/7pN2/56vv6+g90pSYyjE866DodtfW1V2iabhSKBZXPFoQPOwBd13n/nPa22evXn7J03rxF5Aul8W07dnTt2bvn0XQ6/YAmxIhl/Z8NrohEIv/pixSLDp+7ef3WL3z+tJNkyUMBuinASPDA7/p533sf+tL4yPTnLNtCaDrRKv3s3zz1uudPmpNk86AGusXi6FLG/RfoGbWo15fx3EO7PtvTveGf3vv59YMjItsqfUU0aqEMiShFmTpYQ9hfjkYd2VyKdHGK1sVlFpwg6JnqxsvVsbrlfObXnkGpKPoP9Tz2yXfe+MHOZGLWtZ/61BfeuXLpiTVCaORyGY4c6WTL1lewLYOLL7yAJYuXE07E/sUz9vcMcv+v70v99Oc/vrur6+hndU3Lhmz7b39J/4O+XxEN/QdA/ZM10p82z5U0tYdufGnDVb+Y1VCDkpXzhC7RrAS7d3u8+c33PLZ/f++Ndjg8WdcRr/vKD8/Zf+WpDY0behRl8syy5hPIFEdVD/0pi1mlxsOP371p/XUf7tilEvlZWrmWpx7sY8crA/QdytF3NMOfLnUAQnF4x6dncd1NVUT0ldSlPo8jBhGhItVWHYXJKEYMUsEecqV+kqF2akLziYRqMLUQYOB5DkVnmrHsXrLOMYRZxjZs6mIL6IhdyNSkzedv/swLP/jBD/8+ZFlH/ua16v8gqLptmPzRmfdX+gyoFWeggVIaSmloms70dHmoY0H8HWtOrAsLGWUi7xEyLETgUFVfy2tfd/LC7dsG39DTPbJ5zsK6rpXrO06d3W4tcfMBugSHNMWSzkBpipItmdYydc891NP70sM9J5598uvq9jyr8+VP/oa+Ixky0+XKS3h1rFVelOfAtmcyHHgxzLITBE3zoNE6n5iYw4S7Bcc+RJW1gJbQqRS9AY5M30n39EP0pB6na/IRDk88RG/qEfrSjzFR3kJB9lL0hsi4vYzkttObfZJ4UuP6135mdsgOX//kU0/+Wtf1dAW0f78rJFLJ/yGPkvEf8CiJiscF4Vc8R5p8tctAFsfHHfPy1845V/omJSkZybrUxpsZzwgMkeLa69ZUbdzQd+7hg1M/u/BNyy/wtYlVU6WAfWMTDAVFepwUAyNlXrrnCE998zAr29ae9q63fap59eKztPe88x/I5XNoCDTLwAhbGCELK2Kjh02kUghZGf2D/Skev2+KSX8X5rIXiNn1zDVfj0UjXbn7mSxuZ37yWuZXvR4hPJxgBKXSmDrYtoVlRNCFTSBcTD2MLix0zUYqj5H8FgJvjKsu/ofwwQOdib379jxi6MwIjb9sn0jkqwD+Hwdq5Y8oxMzeoiZA08DQBYMD2W3LVjS+o7k9FE/G6hnID+P4JvWRWaSnFQePHOGNb1xX/YfHD5acsBiob7Mu6s2X6fEDxodKvHDnITb/rIdTWs/h21/5Fh/52MfDy1cs17761S/yxJPPEp5VQ2R+HdG5NVixMIZtVsANmxhRG8M2EZqOCBTlUpldz+c4vDNHfM12Qi1D1HMms+IXUfIn2Dl2K2WVZnHtW5iduARTJMkXJiiUJ1lQdRYrGz5IyZ8m63QjCdAQ6MLE1Gwmy7sIGQYXnvreNb+69+5duVz+sKHpr4Lz55pC/f8GqGLmgmpmXeR5gZ9OuVXnXtR2JoGFbkDBy1IsO/hCAzfK0y8eY97shnXbtx2brWbFG0czRfY+1M+Ltx5iefIEfvyDH/P+D32Y1rYOQDA6up/3vOejyIVJIvNr0QOF052mXHbwnCLeVBmv5ONOFwmKHpouMCM2VsgGBUNdWbY8UiDamiI0fzt+rpa5VRfTnjidgcKzbB/7Hr7UWFjzBuY3XIfvhHix68doWpg1re+jIbYCQ+hICngqg0Ch6yHGCztYPe8SDu+bvnz3np15JYP9um54//8BqhIVha8UuqHRP5DtWru+4QNtrUk9bEdwHI+QFaJ/YpppL0+2WOC272627Aa9sRx1efab+6mebuI73/wmX77lq7R1zAbAD0qMBE9x71M/5ne/3UvyxBq0lIcwdFRLGAyF7utoi6uRdSZaPkAYgqDs4+cdCBR2NIwVtcmMF3npwTEykx5Naw4TaCWqjbXMqbqAuvASutK/49DkXRiaxeKmN9ASX8uBsd+za/y3WHobKxveweyqK4hYLTj+JK4/hdJKCL3E5OEa+/VXn3GJHa8+cc/e/b8ydQP+nLtS8D+nU5EaQaD+apdSUXZ90wu85b4fZJQUvq4LxMz+hpoB1Sn7Wd3SWk87p+PEiBah7JYQ6CSiPi8fGuPZZ/tRc0Fr9Om8a5D3Xfdu7vjVnaxecxIg8IIse8Z/wbHML5kSu9h9cIrNzw9T1RJCr4+gr0wQTJYIUgptVR1qrISW9RBzomgtUcxkCC1mEUiJlymhnIBQIopuGezfNMTOp7O0LC2RmDtIyQmos1azuPZqbL2GvWM/4eDUr2mpWcvJbe+mPrSCzqlnOJR+hLLKUh85hXmJN6KJMLnSPgJrjL17ulg8azU3vPWt83/xs7sHgyDYqekaQhOIGceGEALEcUv3vx9U8ba3nP03TVIZED7hpMZfBKp0zcG9470vvdS7pac79bin/GcsQx8XQqHrGq4fsGR1bfI9n1l57MSFi2tDtiLleLx0eJID+8fpyeVxCmnSTwb8+NYfcOEllwPg+XkywQu8MvpdMsVJ6qyV+GGfPfs9vvLOF6hbnSRojqDiOqUXp/AWxpFHc/gjebSIjtIF6AohJEgNLKMyO/IOMu2iZyR2dYR8rohRDvjw58/jxo+djiGa0TKzaYqdTMi22Tf+S3ZP3oFhSubHL2J+8nJCegt9hQ0MuFuICpN58aspuV0Murcy1m/SvaGGj3/4x7zhmhu2/ObBx0+JRiIcj8eSUqEphRQKL/D/Z5Y0za0hCsX8X+2TU+nglFMbz3n3359w8muu7Ki57k1LV65fP/tq39HePjJU7MgVnaMCNWXbJo7yHSvpL9INbU1zm829L/fxxDP9NJ1Sw0TnKMXndH77wO849fQzKDopdnbfi06avbmvMJ51WZBYS9oroaSHZ9hsfnKIwNIwZsWQUx5uJoCEjtqXhbCAtggiKiDwkJ5EOT6aozCrIpgLk2hNIYKohjeSJ9YQRzSEeO63+9j/0iBLllfTsSBgML2dyekJZiVOZWn91VgiQqrYy5GppxjO7aM5voaF8fNJWrMpBlOYYjYh0Ugo0U+aTsKa4IwTb2i79/77d5XL7mFRmVIoqSrBav+D4lcYxt/m8vL9gMWLGy56ZdObnojHKyErumlDYLD/YJbbf3Y4d/ddO78zkZ7+avvc6uJZ19acnUzGnm9tTXLPb6dYe3kNXVtH8LYk+PWvf82c+XMYTu1lKP0iRecIQp/HmLeDlmQMR6VxlcMrBw2OZQSdT3fStzdD/PRGyseKlAsefr4Ikz5iZQKvP4OcdtBrbPSoTeD6UAoQEswFVYiIRuD6yLSLs2WMSDKGOS9OOVfETJe58LRWbrrpAmrmWUynSoTlShY3XocdihAEHiPpXTiihBekkPjEjCjJ8GIS5hwy7mGGS3exv/shTu34Gjd//Ncv/vyuu88OmSa6DkFQmU3/ozM1bFkYmvZXu2nojIxmx5YsqXvbmrUdcd91wPdwHEmiUeOSy5fYZ12w6qzRocJZ+/cM/ybeGOrydN6w5flC7fILq8XQwQlKr8R4+JHH6Jjdyr6JX+CU+slLycH8TqTYS1XIxlNpjox7vHxIMFZ22bojQ9lQ+J6GN+YTuBW3gzEVIBcksVHEOiKYDVFUKUAv+phmZYkjfA/Vk0P5oEdNjKiJVh+FoTJaoGNFBcmTG+nKlHnkwQOM9PVz8frXMb/tFHZNfIepYjcmVUSNOJZeJGnPoil2MlO5A2zv/SpYBZpiZ9IYvYhkZBa7+x/g6P6plh3bup5QSg7rRiVO6396puqWafxN7iShge9LN53x5r7+DWvWhXSNkXyOg+kAW1tMqVSiqc3nsmtO7XBledGzDx99pH1p3VjHadWX5FI56+A9WX77wEPMmdfC7syP6B04SMYt8/Mj9zHhxKjXPAanyjxyTHFk3GDPjjxuOkdhzIUa0Kt1CDSCmVGvGxo0hKltSaLGCnhHMljtYfS2CL7jUxxKUxrJIQs+Vh7UlAOmQK8No6IawXgZZ6RI7uAE1e1xomtrODjp8tTTO8iMjJFzekiFNzLmP8doqpMqewm5Qi97R25ladP1tCUuZXBiA0dG7yPnjtJefRHL2q5lyZKVelV18vVDwwPJsbHpVCCDEVM3UAJcz0dKZQaBPD2Qcn4g5YhUytc07b8WVNP82+NsdE0wNJg9dPpZ8981d16beXBigL7cCJn8NDFjLiHq2Ll3P7//3YGlJfxl8y+pucSOaLMf//IBvv/NH3Lm2WcxXH6ZjSO/oOiW2TZxkImChlPSKKZ8jk5q7DhQYqAzTzLmkun3sRZJlPJBBoiwjsorUAGapRPUGoSOlpBJB+vkBP5EmeknhigenCScVzRXJbGFwcToFHrYQi8IpB8gOuIITUNMlymnykwfnKTYnSfWGMaZb7Bp+AgbX0rR+aKPGSjqW6fIeHtQfoSRwiFGU6/QUb2eeU1X0Rhfj9AlvakXSDudtLa2cdE5V4Svvf6qM+bMa39X56GuxNjk1LN+ENhzZrde88Y3vv7O97zv3f/w2tdd9Zb6hsY3joyO2dlMertSKtCOz+D/rE6N/qVtpMpK5d8cyrsu73rXqT/45veufm//9CT7xnZjCI3Ah9bEYkplwftv+BXN50RZdnkjj312P1esejPfu+17oGDj+JfZOf0o6YLOc6+4pNOCooSkF5BImuzrNliwEGoafHq2GVhzyijXI3dMw1hsknpmmiANRlOYcpNGeEeOyOUhss+kmHxhnKpklKuuPoPr3nQNS5esRDdi/Pr+R/nCl77KlF8g3lANjSH02dXIgTzu/jGUVJSmswAkWuLUrG8ksrAaP9Bxh8ssqoKzT7RYtNzGjEYoOGVMlcCUDYRDUYqpRVy49no0u8CUtx8hIG7VEqWV4fExvvv17+/paFpo3vC2dy9N1sb/xTsdGBnmn7/yz5tu/9nPv+6Uys8BWdMw/nM61dAqEXf/5kuBFAJm9MHxDoL+vszY6ee3vyuZaCBTShOoEppukDcm+OkPdiMNycLXNLD74UEappdz+92/QDN1Alli98TdFIM0Q4MR1rQkMEywhMa8NpNwXJFxBWFPUpoQJKstyr4iNwKhhIkZC8hnNeT+NEZblCCksKZ9DA0mHh4lHDP43GffyWc+czOLlpxFLNFENFbFupPP4MorX8Pulzdz5NBhdGWgxyMYDQn0qIXIu1i1UZSmU0qXSO+fpHQogxXWiS6LM5HQ2XaoRNd+B1tBU4ONFfHw9EmUnWLnoVfIOV0YcgkN4YUk7To830fXJUa4TGLJRNOqM+bVu0Y/mfwh8m4vu7t/S6mkMa9tKZdfcmn7Fa+57FphmNcNDw/WZtKZIyiVM3T9/0vx+2dzXiCQCi9QlSgm/Y/AarogkymO2SFxxpxVoTkRrYmCP0IoYtLX7fKrrxyh6ZI6tJDBntsmuOeeu2hv72CqvJeJbCd9+ZfwlMPQaJiVs22mUh65nMvquRH6x30SCZ3lsxwmpgXzV6iKMVa0aGhUTHTr5GM2YiqPqQuCiMCccHEmXLL9GV732tP44s1fJJpoQ0kXgQRhAgG1dY1cd8P1vPjkM3R392JIgVkVrjgqprNYTVUoJTGW1Fb035RD+tAE+d1TaDkfu8UmU2+zcyjHyJECxZTCK9i0NkVob03iaePs7n+SoewGUuX9HBrcwHRxiPbkSnRpMjh9kM6hLWw+9hAqtJWUf4j+1GYmpwaoitQxp30Fl11yadU1b3z9mb5bfMOuXXt0x/P36kK4Qoj/GlAruSyV03Uqay2NCsZCoYb7ssfmrefquuqOkGGU8IXL9z91ELHIYP5VjWz4Vidvu/jt3PDWNzNeOkjX9IP0ZDZRFqNMjEfIK8ngRIEDfZI5zQoZCHoyCissaKzSGU3rGIGkXLSZtwTmzgfN1BjKSYRpYBd9ZFxDTLgUp4sEGYcPf+A61p16LigHgQaayUMP/JJ//Nin2bx5E6tWLkVH8YfHn8JojWMEQNhEuD7KEGhSEYqbhGqS6NVRtJiFky5SOJYmu3UStyuLLgRTYYOuQLKvv4gqwML2EELo1FXpGFaGcjCKbmVIe0dJFwYYKxyg4B/GKRdoawmTSkfIZSwWzAqjmUP0Tm4gFJLYWhO1Vc1ceukViQsvuPjCkdHhizsPHxkPpOo0Df2/BlSpQNc0BBIpBVKKmUBpg2LBH5izOCqr5qsLGqpreez+wzy/YYLVH+xgfF+G0vMaP/75D0gkqjgwcT8H0vcRiBKGZjHYG9BU4+KVK260tXNDKC1M2NQ5NuLRmtTIlCzmtSpiSYOpCUXE8CiMKUYcg6L0MTIlDNNEuAGqLLGKig996C20dSxAKQehRXng3ru47s3v5XB3D69s3sovf/krDuw/QDFfQquNoDUn0XyFdH1k2SfUHseyBdbcMFbIQIuFYG4csy6Mrht442Vyh1IUd2Zh0iPWHmU8IlAezGuwAQ1dM0HpoDQMYVHwJnBVBt/ReP6FgCWLDXQh0LSASCyMHrbZc2SSpnpF3A6TdybIecO0z2ngrW96T/PJJ556bU/v0fN7evsmZOAf0Q2jAs5/BtSK71KB0KhsV0oUgnDYoq2p6UDTPN6Spxy/45Zj1F5aRVVbgl3fP8ZNb/sol152KZPFw+ye+DEoDTBA6lgRyXBGIg2buU0aEcukOmpQ8iROOeCEBZKhVCVAzJEasmySFAq/pNHtCLyCi5Eq4pU07DYbLRXgpx1uvP4NNLfPRogAFZR559s/SFPbHB749Z3cf/+DpNJZJlNpkrE47nQBrT6KMHWQimC6gDUrhq3rGHUaZr2OKEukaRGqCRFuTxKaVYVZH0UqyB3JMrFlAnfYY0RpRGpCmJ4iNe1TFRfohkYQSDRRAVjo0NAEpi4xDYkd1innbHoPe8xdZDOdm2a6MEVH9Sps02aktJHuwiMsXbKQt7zpfR2zWxdd191zdNbwyGiP58sxQ9f/a0BVMx9IJbFCOnPnV5XnL44u3bt7rLTl5dxU+xU1zeP7Mxi7Y/zgx9/DtCWbR79IqtyHwESg2H0IRkseE0WfbNEnquuUXI/JYkCVrpjOSDxfMp3RcD3J0rkamrBZMNdmbrvN5iMepayPlXbQhMATHnZVhFTnJOedtp4lK9cCHkif22//NfsPHGb7tp309Q+iVGWZ0FBTQylbQjSG0eNhhC/xxnJEOyIIT2E2h9FHXGzbRMV1cD2UkmiGSbQjhL0ijtmQQBV18j05JreNcWwk4JBu82xngeEJj4aIoD6po80sI3zpYZoeZTdgYiKPbem4rqKvv0R9i0UgPUZLe6gyZlNjLUDza2iwl+MHeab9zSw7sZG3v/mmNSedcNrbh0d65/f0DuzQdT37Z63fvwVUkARKEQTSUkpqQgjllAN6u6ch5HZWVTcfPuX0i6847B+p6X5yiAuXXcSbbngTG3q/zrj7MmUnhgoUQQDTeY+SVBTzkqIjaWkIqLFMbN2iJqxIyYA5DVCSgtoajZq44vCwzqwmhQwk27tcChkfe6JEdFmE8rYskdVR0lunsBG89vVXAhKhRclnp3jksWcZGh5BKUVTYx2FYon6eJxsIY8xK4kWCyFcn9JgmnA4TLgmil5tYBYkqloSidnEkiaariMKAbXtJqWUT0lCeHktocYa/DJkDoyT2T+FpsGwZ7Kzs0jfOOzphkQ44EAn7Ot0GBjzeeiJIkd2Z5m1SLDspBiuG6CUImyFyHsT9GcO40mXnvQWJotdNFinY6gwY4UXWDyv2Xj/e764OluYumTjhi2Pmoae+VMP1b8LquMHDaDOkkouChTvtM3Q+6urEl+KRqPvD9n2WxRqZaFYXtO9p7jHXlLVXq713z2Ym2T6uQwff88naF1k83TfP2HoCZQjyHgeZVdR1AyKBRjrKzL8ygTFEcmi1bVICZ0jPkLTcB1Jd1rHDjRsw8AQOumUT0SDw11F0i60RgKicy2iER8pLMI1Jq88tJNTT1rO3IUnAw4rV86jq7MTIUy+++2v8IlPfJR7fnUfXr6EG9Ixlrcgi17FKMyUKPVMU7WgCTOkMOICM+yj3BCxOhM7Bm11UNsUYrRgIqMWZrWGVQ/h2gQkk3iOpHQoRXnfJOmeLAMjPiN5jSPDBhm9GjsRY8O+LBlNY3zI5aVf9dJ3KM+C5bVEEzoy0CiJCQRhVte9jbbYenLuIQ5N34ojw6xoeCcH9u3hwIFn+cD7/7luYODYxVu37XrAMI3Cn4ZEGY7n/1lQT1k3/6OXXbb+Ex0ddVRVxWmuX0Br4xxQFuUyTExMr92wbStf+Op34kFDPOUudnGfgYgXZsXK5RTKvdREw8jARwqJoVUA9fIGqazJnl/uZ/TgFJ2REOtOraN1fgh7ElAOnaOCpfU+nWmTNTGD2hikUzrZosFJsy369k7ReF6UkZ0+Cy9LMrnPQ61vRmZL3Hjjh7n99jDnXXIWkVgDv/7tTwAbaOVXt/+ETCZHpNomfsYsLF1Rt0ZnuEtR1DWk9Bl84jBNZ7VQdWKMEBYFWxAyBJ5h0ThLZyrlYpphlBlgqKCyxdcB8fo4xqIYfsrF8j1krkhpOEfhuSm60UnPr6F8Yiu+X6Lw9ADFgSy+KxnaN0HXriwf/8kamhtNTC2G0gZ5vO8dhEUtdeZaasWFlOVWtmcOc8IpX+bRRx/ghRd+zve/d9uSjRs3fbOrq/cGy/6jZ9D4yCcv/VdiV6FpOldeudA87ZRFQATwmE71UyhuBaGwohrNVXGsoyPUz4qeULsk2lAquJT7Hdrr25gzdy69+e2ELZtyQaCbLvs3pxntNZl/XgMTEx6pMQcBlIpl+vdlqGlOMD3uIkOSOUkNN4BwWMP3A6TSqa7SKEmdjuY4234/guMkSLZadD9WYMkVNrnhHEtOmUtfdJgPfv5dLL59ObObZ9Ha2kI4FGHzlt08t+VFVr5uAcQjFKdLtJ7godeEGepx0QwNo6OKoORSPJqm+qwo3qhBdUKHvMRE0JtSOJrBKQs00pmAgc4SfnOYTBEMTaHFNPSQRVUsTGAmqYs1YfqS4j4F5Sx9Tx4mekIthb4cCLBrY2BA1+5RfvjpA1z5wUVkuxxCpseys6NkC0W06DPoZgQKFmn3CBvKH+XKK77It777VWa1ruCTn7jp9W9/xwe/pgtr73HVqgdSp78v9cfen6anZ5oHH9jzQsDwwtUnFZcNTu0g4x/DtyYpm1M45jiOPUD9HIcTL2ya23NkurFvXDL2yihnzD2Ja974BnpyD9M70oeth5C+xpOHAl7+diexuXHyGZ/JrjRepgxAPGmz9sI2ck6RcNhntAC6KUlYMJB1GEyZzG2UuL6PoetEq6J0bsyw4qpaBrcXmO4JqF9kkmj10LwwNbVxEh1lBsr9dKUPsa17J2PGKHWzaymkJNlcipqVGmE3BH6UoQkf21ZEaiO4IwXCdQZ1a6qxyxqJWWBGJTJQJGsNTA/aYiYaHpOGoFAWGJqAgiKk+UQjBk0dkiQuo0ehZq6OlzeYc14dlMDSHKa68kgFmAJjdj2q4DLemWZiXDBhRHn4y4eoaY3TND9EY6iW5x9yCMcF0ahNtjyCFBlOXHEa9975C84550z92WdfSExO5X6rCQ2lQJ8YLzI6kvkXfWwsw+R4IXjqycFnErX+8lXrogu9QKCUiYaJ4+mM52wM3WC6oLNpQ4mUEEy9MsQNl76J1ae0sGvkLg4eKdHRaNI3WmJ/IMgfSjG4ZxqjI0q+p4g/XUQB8USYc9/QxthkDqlcCo6N6SgCX6etzWYq7TOd8SCwSNiCqmaTYxsySGHQuMSl76hLpi8g5BnMP8WiZo7O9LhHpjugOC4IygYiAF+WCdVqzFpbTUdDlOpZBkNTHtNHiuiOS1B2kK7B/EsaiYVMEtUKJ++R75eYSZvJQZ9mW9C6wONICrIZSa2h4+Z8qusC4o0Kw5TkpyQKk/mLYshxRWnKIyi4GAmb5iaD9HCRzGgZMSuOlitjtMSREwWKGUnr2U14gYPXF7Dq3CTKtxkezFFVDaGoxsCgTiiaYSJvY4SybNlwkMXzO2a9+NLe3wghUlIp9HAkjG5o/7LrGqapo5QqP/fc6H01NZEFa9fXrJBexaukowMGWkixZXOB53aWCdcapF4e4WMf+DgqeZiR9GY6GqPoQnF4OMvBrIsowfiLoyRW1KKEoNifRUnJojVNnPO6OUyO+IzmJeMFwbijaGoICHyIhkI0VUWIhCVj4w41SZ05KyK8+PNB5q2poXWxYHSghBQBqS4fzREsOyPGwtPCNC23aV9j0zQ3TH2TTW2rSTShE2/TKeVhukcRDkmUkCRjIVaf3cSqc2oolXzSoz6FrEX1bINkg06mz6GhReGFAlJjAYubGzj9ghYyGY+jA2VqooLA1wisMLPn28zvkOQzAZEWn5p2hW4KIhjMX5Rg53Oj6IkQ0nExG+LogcSrE9ieRuL0OGMvp1h+YgJhaCxfaxFKugxNauSzNslIG1ZB58kXh3FzGeLxaOhwZ18hn/Ge1TQN3fp38kE0TaGky0vPjj9sxsILmpbaK0ZTDtmyJJCKoudz7/f7mfQCVEiiDhT4yE0fZSp4kbzbz/iwg2l5HEsHHJrwIAqpl8YxTRPqTHIHJwF40wdWsWB1C67vIiIFHB8s4bPz4QnG8gVETYCjJO21Ont7FemcYPlii5a5UR79535a2kKcfWUD4ajArtXo319m71NFDC3AySjcPOiWQpiK1Agc3VckPw1j+30mD2dJGCanndvG6a9pZu5KC930yOZ8eg64JDsMhBag4TN5VFFGgq1z5OWAE85sZtniaspukYMjRepqKh4327YoOgH1CUEu7WOZ4GQ1auos8pMBZ5zVxMDhHMOdaXTbxM+VCTCJNwMjHrGFcRyhaAvpmHVRbE2hRMBwQWfxAo/pQorq+hx7X5oi2WgDAU6uXNXTM/VjyzbVvwsqKHRdEgRSvfJs+oloQ/gaq1Gv7R0rMpQr0n/EYGR/LamFJdzJMrFBg/e8/10Mlx6j5GfZvz9NdbXF9iHFsOfDpEt68yT5sTyL6lu47rWXcsm1KznrklaU4TCSKTCZd0nEBOVBA2tfwPx5VaRDeeK2IihCpgTKFNRFFI2zDNoXV/Hi7SP07swTj9rMnVvD4nW1LDqhilgkhhmyQZi4GZ1SRhDIgELOwx3zOfXcGAuWxTj9mibaFoewDQm+g+cq9m5wicwVVDV5kJKMDPuEkhHa52mELUnOsTiyfQih5dg7UmTK07l8aQLh+oznbdYth9y0wUTWR3c1ihMaNfWA7iLLBjf83Sx6DzhkxgpUhQRrTmwg1FZNx/lJ0kdcjDkx9GzAqjURxtIBGU/DCyQR00OpEv1pn5AMsBoChFZCZMINe/f1/14T2rAhg78YfwwolBTomoHveoU7vtR52fu+suKJ9lXWvEyhRHv9Gexs2ovWZFHaPUF7dSvxRIjS1BSu63LSyXWMThY4PFHESBqMvzKNAt5y9Wv4zBdvwG8Zx9LHaTTDvDSwn6qIy/SUjuuG6ViQwZsukK+SZCd0ljeFGJ1WVEcVVsJiIicwjRIdK3Su/fQcjryUIzNQZPPBfkoOOK6irj5MVb2J4yvGhksIJRGWomVOhPVvSRIN6aCDaTsUHZeDm11WrQ9x7EgZLeljhU3Gej1sGaVpniST8shNSuwIVHcYiOYoj78wSVVtklpTYzpdIhbxqEdSH5P0dnr4rs/8RTGcdo9yQTJ3rk7XgRKLnDif//HJpMY9pAZ6rcEjvx2kr79A06IIjmmhV5uETEVDtWIyL6iKKIZGLbySjqa7xFoihKodtLIkd6xK2JZ5lpRqm4H6a5nWAhQYhqCQ9Y7+7POHr3nP15ftaFoc0qyxeg52HSK0ro5iKk9zYzO2ZVIbmk2URfTlXmY45ZE3AryuLP6+HP/8lXdy7tvaeXzqRxjHYIFaQKcok6KEFlToAJbNshjKhkmtTFDOSxbZYdLjNkWvxLwWCyUFng+60pAlQdN8g8Aw6dkdIpQJE46blEsO6XSZ6bSPFYLGdoNIo0EoEWb1mhi2VVm+BZ7gaGeJ/Vs8Gtt0HN/HCkP7HJ1XNsCsOgM/JpjMQzpjovAZnTRpqoW5swJqo42cNCuJZsEjG6ZImDYh22PPKz6uECyeH2FiJEAqSTgawtYloWqfHQemaa7N0lRvkC4UyPdKzrjEpv1QhL4jEj9kEDctHOkxXhAMT4RYuUDh+D7RsE5tUmN4VBIxfBzdR5o+dQ2JFaPD02ia0vhzXUgBUiCkQJMamtQIWTqp8fzuO24+8mY/FWZw7Bi5XAHL1vEdl46OdhQFqu05VEdaIfA43Bfgej7jv+7j0x+9ias+sJhtqSfoS5e4/TN9vPaCX7Gzb5hksojrQ1uNTdHRqAmFiNlhZjfGWNxq0xjSaQgbVFdFCIcVqYJP3hHoSoAPs+eHsFdW0X5yDD2pcbhPEonGaVlShWvEqW2vIjVqMr81SjysoWmVYLbBwTJP/HKU3GiRcy6KMzIqqElK+o/qrFwRZt2pOrlSwKo6yYoWjYtOFZy7EmRR0Lk1IBEJEan3SNaUaW4Ns3JFiFNPBCMsWLzAJGra1NVZLFpmMTbgoAU6NQmNWFRH06BrwGUqFyJumqTHfJQIc+Frq7n6kgSnLzcYykRoSBjMbi4TBJJq20eKANcPCBSMjUfIZMJYMZ3m5to1QSD/go8QkKiKv7eShFfhE1Jg2wb9PZP33P1PPbcNDw6j9AATkG5AQ2MLLilMLcq0N0yAxRiS8tEsjW4917zlYvaOvIyth5jqDFE+ovjBP32M4c4k2ZKDp0yE0EiaGQKvzKqOOJr0GJ+W5Es5MtkSezZMMj3tk4xInMCg6AksoXAKBpnpCGU9xNKT4sw+rYmaFVWcd0WUjpNjzFkf4TXX19OxAALpo2sa5VLA87+aZtbsKG/7RCuHhjV0XaECQeCaLG7TKBQt5tfotNTqZD0BvsDQfBYvqOKcU2oYnM5ysCtNV3+Z8axLEHiMT/vU1Bq0VUM2UyaekFimRWuHxsRUmWLBJhHRiUR9qqrBdQWFcohyOc5EVkdXHpos0z/skstCyAqYygsGJ8r0pUwmCxrDkzq+MqhujLLyhCh2UpCsivlCiL+NuVGhKrBqGuiCSDjErk297/3lrb9/JpmMonugXEU8nqAs8xzLbyXl9lFQNhMqoHg0z/LFy4jVKXKlDCFVcbHFqiI8v3EHMhgkYlgEZR+3DI6yyTsGnqNRX1tF3RyddWdU4QyW+dEHDvDy3X0saDVJ2uB4GrrQCaTBglk+NYkiOw+XmDdHIzXu89CjHrYRJjNm4XsB6bzkyKjO6KSOHQ246gO1XHpjEzt7JcqVNFcLPC3CjRfZeEVJtRGjPhnF8sOsbLbZ12Ow72icpmqBFTOpjUfJlTV29ZZY2aGTyyn2HtJpazAZSRmEEzrHBkpIX9HUrBGORjnlRINCSdB1JETYsFCBwDIVKxcKYrbP1i0FXtxUpFQ0qQkrDh1VxEOKcChEYzXMa1HoIY35rTrgIFFUN2jUN8d/I1Gl/zDhpOMGFVpWguZCsRxpCDSEryF8hWHqlIMSvcVOElYUT5kUfIWfdWhf2orLJIHvohOiqdWg9KYkTU3TLFuWwHckpq4j8TGUTn0ixHQhh4ekKmJSLNnUxBOccWk9c+fH8H2fsAm5ol5JfkajJuyRcwUrF4VoSRjMTgpe3OWxqF3iu7C9G1bP06mL6ahAErMNCnmHrXtzNNXHmdekMTAJtm4xkJW0NtnEQhopKVnYJpl2PfpHNObXRxnoC1A1VbzpNIeRcoQ9fQGnL9SYSvtYEaivcqhOSHYdlrQ2WPT3uVQnQkSjUCp61NVDalhREzUq0iync7DLZfG8OFJq7Dvqc+F6QfeIT9iJ0NHicKRHYgtBzPYoWwapDAS+Ij0mKRdLtHZUJ01h/e0sor4X4MuA1Wvmc8opy65saNB/9syerrqs7iN0wFcz6SMC07CxTYuDE3kMCWI6IFGlMRXsQ1MmCTvBijaPwmSUjrkK23DwXIFlCHJFF9fSKPsOlqish6OWRq7kcf411Zx+SS0TOQ8hXISQCGViaCYq0KixoOhrmKaJqfvU1wnWn2RSFw+YKmksng21MYXnVUj3CjmN8QmXua0R2upM/ECRzlusm2swVhRUWS7Vtku1ZXNgEPrHFWevitPRpOgd9dg7qZD4VOkCP69Q+EykfbJZHaE0At8h8EKsmGOxtdOhodkA32dyxOdgl057vU46pxFJ+tTFdYqOTtRwKhRFvuRQb5H0dIxcxsdCkspKCmWBSOmkxjVWLQ/IFQQZx2XXliKr5rXcYBjc/ldB9TyfQAZV1VXVV9z4dxeuvenDZ5/c3lJ1Mjha7tu/59E/7CahNKSsZHnpwsAQFY6zQ1NFdCWQWUnOHScQNRgqSTkvidowf7bGho0lzjtRp28I6psVWc/j0DZFU0sUzTAJfI+xQR9PQG3SI2RqTGUhbivG0yZ6RKfgSrJFie8LnMAmk/WoNQMyjqJrzGJsUqHbio5qDaECEBJTUwhNZ8WCWgyLSia40mmpMwmZLiFl0DOs6BYaUdtjbFqjo96ivr6Mp1zqqsPMdiTb9pWpSZiELJeNmz3qWyOsWalxZNDF9zQs3SU3bZIa8ZiyBY2NJnbYpqYRlq/WKZRdTAmHDgcYpo9bZaKUR3uDgVQGtQlJKR1QLgsaajSk5qELHScUIDUJpg6REnZCoyZW1yqF+sszNZAS1/O02R2NH7r+hjPffv1bT1u+eGEYnzzFYJregQKZhEHzWW2USh4VnkmJq/JINGpooCaSJhMLsKwQvd0jRMXJbB3Jkyn6eCmXWk1ndpvFUAasiEZ9o2BedYj0YImmDotEXcD4IETjDcTCPiook55wmdvikUop9vYK1q5RHBg1WDlL0T1porSAZKhMT1pnNBPQnNBBGhTyHuFGl6KjkckpdBFgGibpQoAo6cQtSc+ESSKiseeoQrMDWps8unNxTmiW1FZ5DE0LJlIGhYJCmQaLOgRHu01GUjqnnRiiu8egozng2IDLxJBHqFGjfaHk4K4CkYgPOuzY7lDTECIkXZ56oMT8xTF8P8qyxSYDYwEtTT7ZMtghk5Y6g5HhIjV1Gh0dOsf6fEJhi9ZWiUGFQMXNecgyJJM6Tz6+dZfvq6PG8SzwP21KKcLh0Kkf+uAVP/jwR9evbm62yflT9E4epuznUbbBfS8eYvtRg6p11ZR6p0AoXK+EEoohf4qwW03YjlMVtkjUVbF922G6jxRIT5bIFj2musuM9Xl86J8W0Lk7zb3f7CafKdPYbnNkT47m2TES9SbjfQ5nXjmb9qUhcqmAwaECi06yiCcihAtlIn6S+fUapu6ysF6je8xDIVjRYZDf7WOKgJY2jb5hG8vQGMoFpEom8+olfeMenjJoTCj2D4eojwbMaSzzwljA6XN0MiUDX5qEzBKBI7BlnOZG2Lbfw1AaRpPEjpiYeUn/sYADOxz8VVGsWkkiD5OpMtVrDaYTBpodgKNhmhpLV5kc7dSYsyKMZWv07Skzf5VBobPMmOmRd0wsVzLclSE1JYlWa3SoCIZtMjXtURVXpKYVlhXGLRcJDMVDP9o5ODaQ+5BlGsGfBdX1JbNbGus++LFTVjc3pdk3OEzRyxG1dQq+4uBYHyR8VHeJYGGMQILSNcrlHAaCSQr0TQyRySbwCg4iaZA+XOST77iHnv4xvLKP9CqGVfeOMUb7i3iBCyh6jmgYQjA9mXv1fo4dHJv5TsMwdeaflODCa+egh8IEms/4UJhpTaeqxsV1bfp784SdEumURsj2UY7AK/kMDXsEgUUx6xFp16iNSkZTgo46k8mMQ3NCI5cPsJSgf0LQXgV6Pk1Xr8b4hEW8yqdchrq4oKu7yPPP5+nuElz9Tg1cHaecY8fTec69toa6GGx+YIreF3LEk0lKOYcX7h2koS1M7/Y6So7O/EW1rDytnlVn2UxOlalp1KhuiDJ1LIcMIpx4Zg2ptMOhfUXCUYN4UnJwdxY9rKNVGTx7d5pl6zW2PTLCnJZ5mwupQy8HfoChaf9WAlsGjI1NPPKG1/9o2RU3NNx82Rs6Xl9jGIymShwam0BJj9qkhVEsYXgSoQv0kEk2nyZEmAhRhqTP0NFxPMdF830iHVUcPDaCmbDQ4zaaK/EmCgz0pBAz/Lwh02btvCVMZaboHO6nKpogbIcJlKJYLuP5Lq7v0blpis5NUyw7qZGwmsOClSaFMvSP6axaXc2SeWGeerSfRSsTpIolNuw2OXlFFf39OQp5WLMoypGuLAXHoLFV4/nteRbNDzE44tLdIznxtDjRiOCph3OsWhtGCp8j+1Kcd2U1Tz2WxRE2r7uulpHJCQZHMux6zmekq8izvx1kvK/EA9+sFIaY1dTMGacspcaO8vgzWznnlBWcesoStmw6QOBKfn7HNsyIZNHydpo7qqhr1NkwWUAzDWJxi0QowY4XpunpynH4RS0YOFzeeHhHel6sXmuNJ216D6Yo7F/FqtWncc3HT175/HN70IT4SzpVEQrpDA95B//x3Vuvff6p8Zfe9bnFXzVjfjSumTgoAkMhPQ9dCHRboMdtRkaGMPUIpgqxsDrCWH2WY4cUZp1JpCmJlQghamyUVMh8xbEeuC5C0/ADn8bqWlqqa8iXsqyZs5iGqlpKnkfeLeN5HiXHASEouSWmM2kObBvjwLYx6lojJGpsLCtK5EMrmL0kjigaJKIB+ckAr09Sc4pGV8ohO16i6Yw6/nDfGItPj7Jovs3AUQc3CFi1Lk62mEMzdEKGTm5C0tShI4ROeTKN0l2Wr7f53d0T3PPdYczA48m7B8iMlwCdi89dRvKkMIvmNXPnr17gjLNP4M67Pw3BOBtP2s+b33o5N7z1ImCaPzy2hZeu3Me73/5W3nzjWqQc4qrLbyM17bL2xCW4IYP7N/WxfVcPCTtE45mrghtfs/75b3bf94XXXLzmaem75Q2y7/C3vvGh1RPTR0V/78iDXUcGCYX+nSWNUmBZGoZpyOceGvl+95HCnte9r/Uzi1dFL7R0Ex0IRXRs28BQArMpSndPP74j0bEoF31WzYrS3VXEWprELARk4ibOK1OYjTGMKhurMUapbxo00DSduY3NuH6ZWCjM/Na5KBWQLeaJqBDV8QQlt8zg8BiJcJjGqhqm8wUmUlNMDRWZHCoCKT79liFiiTCe4/Pb7+mU8hKnKHnsthDZlItT9vn9jzqZGiviZeYTykmevq2TguuwcEWCwzsyGCGdcMikWARDi1JXl+DFhzvZ9hLUNkTpO5gjGQrT0FDLh991Df0Dk9x+15N86CNnsv7MZSTj7ew/PEw2VwKKdB/ooqt7nMb6OLhToAp8/7u/Ye6ceXz9G59CmBv51td3EKtu5IknP0F1Yx3CKvLQfY8y+sU8v7n3o5xy1slW39Gjb3Gcy7a/9R2naAcO9D+4/uxTD2FOT6cLxXRv3+R3OzpqEdpfnKl/bEIIQhGd8b7syz/5TObKaz+w+LMnnpf4R9/3aapPMruulpG+LLG2CEeeHmJqLEdEDzNQmmBWbRWJGp1iUaBFBAnNJntWA+Vnx7DaEpiz45QncvhFh6baWtrqa5nMpjl99QnEo0kUEl0IhKbPpBsELGmfzeYD+1BBQDwSx9R0cm6RfDFHLl/Rw/lsCcs0mRqrhMvousbY8B919ED3NAAP/nQ/D/50/6vHe/dMkozGqImF2T82xBteexaxdJx7frGJq684jZbWOu765Qtkpkr8/umPcOp5q0HY3Pb9R/nFnZLx8SKlgkci7hOKxigXPMDhnvteIp3JErIrgWqvPLGHp547xLVvvAbdFAz1d/GjH27lgx96O7MWRBmfKJIb2s43v/4kF164jrVrT0B5Dtu37r1j9tzaE92ySyolnj/hhPZP79jR89FS2XwxCPx0KGzNWB5/EUz+JONZYIV1inmv/Jsf9n76qV/m3hoPV00vXTSfhYlWpOthV9mM6hk2vrgN27IpK5+sLNPSFCHwDJRlYukWycYY5qoaMl3jZDpHUYHEtAxsU2froX1EohHmz2qjpbGe+po6ItEotqmjaxUe/Fg0wslLl6PpOg3JJB2NjcRCNvU1tVimhaZXnA+NdXUsmz+fOa1tzGlpY3ZLC1XxOIZhoGkamtBefT4xk7KvCUFDQxXXXXUGEdvizW89mxNOaOPEk5fzkzs/x83//A4aWqtRKMbHMyAsUFmmp/IAdHensHQBaMjAo6Euwe7Ne/neT57/1Hnnn/KyQiBLWf7xn36LL2H5yqXAJLd9/0V6+l3Wr59PsQC1ScE3bnmGo91Tvzrz9BX9ZiTJWP/hwr79448vX9H4/rHRwt7uozmvp2f68NBw9mGUTAshZriT1V8G1fcljuMghCQIXNyih22Y5KeLPP6rzruObRavqY43YBsWQT5ATvpYLRF++LN7yKQcQrpOOuewcKEkHNUJpCBoDFHuypDfPM7SjoV8/p0f5qmHfsu2l17k9jt+wvXvfBujrsuX776Dnzz8a4anR6mKxYnHY1QlYlQnYsQjIWKxOPNa2knl03Q0NdJS24Rt2tRUV1XIM5RkZGIchWBWYxtVkTjxSIzG2jpa6usxDYNoJExtMsnc1hZqElU01tRQE08wPZ0l44JhmmRS0zz5+62EQzZQ5lhnL0eP9D8IvLJ7b+9MbqfB6FgO4P7nnt3XgwpAGrhuwMhwiqvf9J2PtM+qu+V97758VktjFd/6xiNDL2w8fKtpmvnlS1vYs+XJY9/9wbZvtLfVqNpqk7rqEHf89OHSXffvueq8c094+8UXn4KQIzz44KbPJOuqzzZtTXz7e4+/oZQLurZuOfbuvt5JpFT/gnLACET53yKqQybvkMln0TRQMkAGBoGs7HAsnzfLeuTOAxvnLVXffuNZZ33Y1CW4GnEzxK4j/dT9Umf5G6vYs1OiRzWSVeCUBFPP92IfDPj25z7PJVesJev3M5zawqjKYdRGuei1DVz/5k8yNJLjdw89z90PPMH6xct597WvQQQBxVIZpCRXcgnpBuPTKXpGBpjf2oEXeGhCkc/nKwYV0D3Yz4rT5zCvqYHByQlS+Rx1VUkioTCeL7EMnWjUxtJDGDoUHQchA7p6xwlHomzd3MmOvQOsP7UGMNj40i6mprN3gHjl+RcO93+2OBnRjTiHDo0UgBu37+i9a9+eoTlnnbeAsZHM0KbNh/7BMPS7r3rtRfNPOGFuRymTfv7Wnzz1lhXLFgzm86XLR4YHpz772bvemi+6G9e01V06a1Zi6QvPbeAfPvfgF5OJ+ENf/sL75je2VHU8++gjnd/8wQvf/eBN1172oZvuOfHRx7b13PD6MItXdGAY/5YJwFB/UzEBgef7mKZlv/ddl//wy195y1l9/f09v/zV4V8UykXcII/mh/GmSoTmJ9l49xHmnrsOYRvk85KyUIw9fpjVLOK7j/wTZXs/j++8hbHyEBhQLGiISEDULGJlDOKheVz7znO45oa1/NNnf83HvnYrH33r62murcUpO9TEQySXtBIEAb97cQP9E8PMbW3m2GBAY109PUODla21cplDvcd460WX0lpXy8D4OKPZDIZhksuXsAyd+qo4BauM5wfoVomEaVOYSKGkxz2/eYXJVJ5TUIDLM8/umgSxy7LtqZ17B75x9GDP51pmzefQ4YFOXddLJdf/xiMPHbzyxHUncvTYwMVKyf2nrltGbbKKo4cnNt1598NX5vNObvXKRrF564GP3fylO14ZGZkYBY3VqxZMH9zbx9ve/vMHCkX3qze++TXMnbMs0rn30NYPffy+j/f0j6nR0enHjnZV1uyapvGv0y1enZOG+ec/+NPmuRJTN5Z969t//+BnP/uG1wTka3Z19kcCJ7mzVFe85KXhw+ijBsWhDFZznKkDkzRWx2leWct0WdH/h2Nc2nw637ntE+weu4v9078j0VGgqUWnqSlES2OCzHQVrR0RQg0WE7kiLzy/h1Jukg/cdApT+SJf+94jrFu2iOpkDMcLMHSNuto4QVnncF8/hqUTDYcJpML1XfLFIoauMzY9TVN9Ha0NzYSsMFHTRggwDINYKEJzMoEVCREzIpi2SdwKU2VHKZWLZByHuro6dE1x2uoOPv2Fe75RdPxHDE1QcpxDLY2Nfz97VpX9nR889Vsp1B8EYmhocLrqkgvOaxkfz35m34FjGELnSNeYc/8Dzz+xceOB8Vg8QktzPUePDnTmcoW8bVtouk42myv94s7n7hsYTH9ZE0qetn4dxWLg/P7xl+7bsHnfoXJZceaZK+k+NsjYeIpVyxdS15CkWHSpb4iTK+RfLQjxV63fIJCELGPF93/43sffduPlbX1j+9jXt5eXOw8fKHYvHWpek8A1dWxNEVgCM+NgtYc5+sIYyy+bzytHBqgZjfL+b1/Nht6vYdVmmR+JUy5LZCBRmo+u+SycrbGvHzradDqWRGmbpzHUmedn9z/Lde9Yhx0RfPGHv+QbH/k7oqEIvucTtnRWL2snV8xzaKib6po4yUiEWU0tlMtlCqUSUkpe2LGVS087CctoxvclZddj68FD+K6gPhJGWj4qsMi5ZcZHx6gOhWlI1CCSYT5/8yf4u3d8mPd+5Od9k+nCDyxDnwmEF2NPPX/sgXmz591YLJV+ZIcsLFNneHT6S5/8h59vb2ioZf7cDrq7e/ElBV2Iwp+KSiEEhqEjA4kuFAc7++9TQMg2cVyHctnBdd2043gYfzmW4c824y/jWrGmZBDU3PKNd/3uLTeub9vW8wi9E/uJxMC0nCMrV81b2Jk7gvCNSspjyMBPlTGbIvRvn2LyQJGuew/w/rfeyJB6mkhNknKpgXhkgt6xMmPDguWrA4o5GBoULJitMZoKY5cNmpIes5easFDwwp59XPyGhezZ3ctt9z/GP7z9WjKFEo40aGupZeGcZmzb4NDgMariUVzfYX57O/uPHQOgb3ScTXt3885rriFfdNENQTxmsmNfL9WJKizl4Ro686viHDChPpTA03y69mxj8cIFVCWSx559cc8ZdtgeR4DwdUKmzr6D3b++9WdPrjINo1NHRwiwLCv9h2dfvFcDQiELXdfRNMmf89wdb0opTNPgT1WhmOFbqmQd/sea9ic8zP+iCwWuq1i9etHsC69tmf1k510cHt0KIkD6rjqyN9gYToYuGkqNYkkDPVKJucEJ0BMWedfhni8+j14QnHrRAiI1BoncuYwdNDk6VmbebJvUEZcn7ipRXWeTqLaRyqa9UdBgSZyCh18KKDmK+rkue7p6ePN7TqRr4hhPvrKVqlgVsXAMyzKor40TsnTmN7eSKeRpq28iZFrMam56NZX+9kef5Eh/L5Zl4HuS1qZG1i6bg65rGKEwUmm01FWxbvlCjJDNsvlzcfJFJiYmOWndSg0Y16nERAkRoOmSYrH43PZdB27UhQhUEKBUAEDYtgiH7b+o8/6721+e10ohlMTzyzvvuvP36ycnpvpsQ0fJgIlJz9OoOSeWMM8anMphoaGFLBAamhRoeoWfIJ8tsnhhB7Emk6GxEqMjJpM9kpAZ4mCXS/1sj/ZlPtKD2U0QsTQMBAVX0tcHL71S5vePeBw+pBFrconMSfGa61u59ZcP8PALLxKPhohHIwRBgAw8GquSVEdChMMG8zpaSUbjVMVjICBbKPL9+x5E1xS6JgiUoqO1gcXzGgklwsxqq6cmEaa9uYHGxhqWLJxLc30d+/Yf5A1vvHIOcO5MNd1KeI9UKKVcTbFXzFDS/Z9QwMqyDIyi4/6lz08DjL17ujf1HBvdevVb51x4wjmR2+vbOHUqpdKe1M7LZgt4aJhC4ccqND1GuMLoKXQN/IDmplpS3hDZUp7ZrXuZ3TCOHSlT7IGaNp2ip+juKbKgI45WiUYlkdQxozGWrizRdwwC4eHoPlM+tKyLcc2HZvHgA0+y68hRXnP6aYiyR9iy2Nt7lMOjvTBskohUHA3NdXUUSmVc3+P5bbvYtGcvZ65ZQ6FQRipJXU2CWCyCYVai6w1NZ8WCNmKRGOetW8tjjzzFnXf+iObmutdPTaSfNk0DIcRxUGc4j/930RQCTFMnCBTHjo5gvO+95//ZEyMh4++OHp18W+ehsf1dXSO/+/VPez/rFBedtv487Wc5FWnJWaZTzuqzdU1HF+CZAs1VEDYwYiGUWQndDHxFW22Ux1/swquWuHaW6JSkdZaOHsQoTXvs7S8RiXnUJgSH+gMWt5t4vgaBYOkSwcCk4un7XOau0hGxAvUnxbntbavp2j3NM488TaFbZ3QkT7je5N0ffC2nrDuZ237yCPf+6lHmtbfQXF9H30glm/xnDz3CuiWL0ZmZXFIRsmb02QwhmBIK13O45PTTuf/mL5HPFbn66ivf9P3v//yfDVPvhQop2Yy0/V9thqFjGDqjIymef2YPR48MY1x0ef2/OdHzPJYs6TCXLDiTfE4s37dnePnYWF7aYet+15/6u8fueKTes62XxLIoITuE55fI50G5ASIRItySQFRbUPIZnRinIZKgKWmgREDMiEIZLFsRMk2qQj7z2gUDqTLdU5K2WpO8C1FbMTStoRlF8i4sXxvm4e9kuOD1c5gsDfPzgwdZt7iRD968Bt8RPP34UezcLObNmkdfXz8//ek/kM9leeihZ1g0Zzb15RIT02l2HDzC/U89zbUXXcx0Jk99Inqc7KRCSD0z8VzPY257B+uWLuLW7/+E97733bEf//iOmxzXv+lVLkHxHy+WVzF+/vpv/TV9bBg6tmUyNZXmth9s48D+XjzPxzQNjC0vD/wZUCWjA7mH58wKX++LRladkiRszP5c4Cc+ncvKh370vSe9nX/Y3PKOK99GNQZuUceRFa5dPaRjxAzsOdU40x7Hjo2QG86xfEkT2zdNcdbJCTwvQAU6ug5tLTG695WZnHKIRXWciKC9HnxXMVkUSM9i+dwIvRMZVq9ZxFnnd/DAPTnmzjM5OpFm621TNMairF7bQHWz5N5f38PGxyeZO6eGH3z3wxw6eITevhGa62rxA59UJs8PfvMwJy5bxqzW1lctzuOsfcdfpVLgBT5vv+pK3v/17/CJj32EN133htfddee9nzV0LXc8F1++WhtHgRLo4i9zPQoh8DyfXK4wA9pfFttSSmzbpiLu/3gsmy0AMDoxxeGH+tix6zCe6xIKhbCsioWtR2OS4bE0w6N/7COjafr7UlOrTwn/XU/+aMj3JIOF3Wx7ZY+mucWlq9a0rHjq6aP2295zPQPeRlJpyVjOwd0zTawtgT0ripf3CVJlilMFGqqruPCadp7fPYAoCKpqddxAUXJKdB+dIh6yKeo+NXaIOW1hpArQ0ZhTa5A0DXJFSSikc2RXmj3bBxk9mmXxiVXMXm6y5OQwkRafw50pDm4ucMK6Fk66IMRXPv8olqpCCkVrq8bQSA7X8TEMnXyxRPfQMK+/4Gw0TXuV/69C21qBWBMa5bJDR1MT3X09bNi1l898+h+Tv/jFnSOe422t8EuJV2ERQkM3ZsS4VAhNvGp5S6Uq5yqF63qMjEzgyQDf8wikf3zdW/k3U4+gt2+IUqnM1FSKrqP9IATrT1vNm6+7jJNOXMHP7nqYgb5xNCEwLaPCITxzN3r/oENPT5mentKrva+vzMGD04XlK+Zc1rFan3V0vBfNkITqYPfeg3zhU79j/frLec31Z9CZ+j0Dk5KJrIuzc4rIghq09gjkfcq5MnrGZ/feQc49ZQmNC3Ve3pBm6aIQZT3g3u/0cfvNnTxz7yDJiMmsVdU01MiK5U0lK9oNNDa9nGPFWpMFayzmLbU48bwYuvDws2VSYwAac08xqV+h2LFhivKYwRv/vo17f7mBxx/Zx9vfdiFNjVHaWtvIZDJMpXKMTE6Rzmc598TVlVn6J5WxKsWLoOz6lF2PM05Yztdv+ynnXXg+rS1ti599/oWfGqbpIWZgFRUSsVdZP5WORBCoAIGo1CGQEqEqEZeg8GQAshLEGMgAMVPY15cSFJRKZQ4e7uJY9yCV2u6Kc849hfe9/22EbI2f/uy3mHrFaBNaZVC9CmrI0tGkwNQEhgAd0AUEfoBb1uovee3qCyZKo5Q9l3DcIJtX3Pm9Q9zyz1/BqT7Ggcx29g0FOHmf0rZJEisbUNUGmhA4nk8wWMDRYeMTA1x19Qr6ptJEbMhIl4e+1cdX/uljFEoZXnjkEC2zqqjuCBGzDcTM0iES1ShlAg7sKDB7tkVV0sLQBI7SMMM6lmFSzgn69ipMS7D8IkHWddnxhMeb3rmYuhaDX/1sJ46jce/tX+Rw51Gam6splFw27TxA7/AIZ56wCtsykUEFhOOzNRKysUMmNckqEpEQX/7ebXzrW1+vfnnjpkxfX/8m0zJRx1k+hVYpF6oUqBnOKSrXk7Lykyb+WCxBzohvNSO6NSr8g2pGkuu6XiGj1vVXdcLpZ6zlrNOX090zyJ13P4Y2o9H/NagaVKw9X0EASFEZPYZhsn17/zP5MYHwIxiaRilf5hsf28jZZ57LhRefR292C6AR+AbCVxAohK0jfIUe1Yk2x5BtUSJVUQa8Ih+//nFWzashVqXjYzB3VTUvv/gyvltG1w20vE/IDFH0LHQEQik8R7JynUXIMnn452mO7M0TDRlM5wTZvEl10mTB4ignrItRHA2x/0mNpjk2664z+e2D3SxZ1cK7/nkhI5PjPPDAi2QzRa563Rl88N3XsGbFYp7ZuZv333IrmUIB2zJRqjJT/EBSKJcwNEG+5HDNJRfRlozz6c98lrvu+NlXG5saXl8qlV5l1f4/qb1qhiml8LwATenoysDSTVKp8sEtLw3sbqppRGqKx24fpHPPNDd/9lNkgl7Gy/uJmILWWgO/qKE8hbBAV6ApiNVHSCyppziepWZlM53jeb77kS1INBobk5z25lYm6CJc7fDln53AVX/fQHWoTMwoo5AV0aZ8PFdx8gVRFq632fhshhf+kKI+pphIOWiGgiAgEtFYtz7EkiVhJo/oTI1FuPjdMboGhinkBF/75SpeOvQgL284gBYkcF344PtvZNmCORzq7+XdX/42PUPDRMM2Ukl0TbD54GFG0mk0FK7rc8vH3suzTzzBow//Tnv80Ye+W1dXd63j/sV1/v9a+xe2tVIKV5UJNA+l+whB+Zk/dN7TVltLf2eBX3xrL1dcejGnnX0WGwfvpOjlKJd0PE9Dl1qFWlWXCAVCCnRdULuklsiCGvI7hmg4fx5dUyU+ftFGtj4+gteuU3/jHJqub8drsSiVy4RNhSnUDJdhhW0NKSEIWH5ihDOuqaV/yKX/WI4ls/5YLVlKhefqOFJj9mJJzCqyb4fD+stMWmb7vPRCiavfvYivP3wSv37yd/zotkeQvuKNr7+c73/9kxzsOcb7v3Erj7ywAd/3iRgmJyyYT7ZQBKVwHJem+nruufULfO9732PLli3Nj//+gXvb2ltud1wv+udCbf+3mm6ZFfJ+NWOlIRRCaSgUpm4yOZo/eu5FC/7u+1/ZGh7qLvOb++5H1ozxwtA3GUoniKLoHTPJTboUdo/QcHItQdhCSFXJZ9YgNqeG3M5xpOMSO6WFwkSZrfceYWBHBjuiI+tMJr0oW49JhsagvVonalcSKCWqojOUQEqNaBSaZ9mEQia+0gn8ANsSFZVhQl3cAqmhhwJqImF6elxKlqJtruKVl3NomsHr39WG60q+c8vveMNVr2HjK1t5x5svYGRsmt89v4ndh47iBz5RQ2dZewu+DJAyYGR6irUnLeXSS87g05//Crpu8Y1vfGn14NDI5fv2H3oZmNA07a/rVFFxU/57OlXM6Og/Xa+efsZazj5zLQMDo/+uTtUNXaPkuATB8coLFXKsQAaYmk4QyMLOrSOXb9841PHxj36E695yPQ8e+wBZZ4p0uQrp+BwZ0vByDtldYyw4u5aiFUKTFbZRpUALCcItSTIbRyGiEV5ehxHoTO2boO+lCaa3ZGkPG5y0Jokfgl09kqTm4gQWlg2GrlUGmmQm7c8gHNaxTYNiueIVskMBA6MljvTlSWcCJnOSAJN5LQmCQOFIaJoLI71ldr1c4rIbZrFwTRW33vIo5Yzi3DPXkMk7fOA9r+e7P72fzQcP8cz27RzsHeDE5YtIRiP0D47ywJMvsu6U1bz3vdfzox/fyTPPvMzXv/FPjeece85bNm185djk5PQBQ7dn1r//S6AuW1G35Ma3rW33fE4vFt3zXFeWfC9wpAwcJStScHBg+sQlixeedNcd97AldSuHp57G0uJYepmXDwmypQBZCpjaMs7FVzYxZZm45ZklggIVKMwGGzsRIbdxDC2iE11Yg4WON16mkC1yeOsYO54YoUpJli2M4kUiDI0oRocE/aMh5rWCEAolNXQBlq6ovIIwvWMeE+kSu/tLDGXL1FYZ1CeijEx7JGyDmriBoQximka0IUSiVvLcYxPMnl3L695WS3fPMD+89TmWLlpIPBnmnFNPYtG8Jt71jtdw6y9+x1g6zRlrl9HR2oSu6dxx3+/JOz7/+NmPUsgV+fSnvsyaNcutT3z8/Vft2LHzYP/gyMGK10j+r4Aq1q1vPeeVTX/3XK4sGR1LMTqW5/CBYv+Dv+783YvPHb7D94P9mq7uefShJ65Zcl6Mhw5/AAObkh/wh10BfSM6lg5BTnHk1oO86xOzyS2tY/shF10HS1VyWpWpY8dM0s+OM7VzlPC8BOHZVXh9WQr7pnCyJTxZMToM02DF6fWsu6wFvTFB34SkIS44ZZ5JY1WI8bzH/sE8QxnIBpKiF4AAw9YQJpgCFsTDLKuPM5nxmdsgcAkIXI+sA/V1GgqPg9s8clMaJ5xpEvFNfvW1EXZtm+C3932Nfft3c9r6Rbzno7fx2iuvYPeGV/jwW6+jqa6aVC7Hs6/soGtsnIsuO4empiRf/9pPmZoqcKDzaGpobKzZMCxHKZ8g+GucGn++CbTKXmxF9wDwD59+J5//9DvYuGk351zw9xhUvFeVCNo/AXXW/Br7sSfeuGf23OpFmgowtRIKG19VsX1vVl1z6fd63n7DR2bdfMtH9DuPvol8eZiYiPHwVkVnn0vY0CtrLg967urlpBURLvrkfH75QhmBhoGkuSrg2JDCjGnYtkn6xSmmD45jNkYJt8XBl7h9BfzhIuVMgXKp+OoN1s+JM++MeiIL6zAjGs1xi96hEsOpMokqDTtZ2cu1IzqGIZCehuNolFyXqGOwoj6CKVyamyxynkdMKJIxE8sU2DHBxLTP9udKzG2Lcv55s3jszlEObMgya1YbV1x+Kh/97K08+cg9vOGGd5JPFfnGx9/HolktBEowMDbGll27Oe+cOhauaeGR3+8hW9DYtK3rmTvvef59ddXJI9df91qiSYNiuYBX9AkcH6fskS97lEsO2VyRYqmE6/uUimVKjov0K8ZfIBW+7+F5Hp7r8/FPvp0v3Pz3bHx5B6efeeOfDAAwDQvXr0wK8aa3tnP6xe23rzx79tvKuQirGuYghUvv+Di//Ple+o8kuPvO+9iU/hyTTj/N9gKePvAKj2wuETIVZnUUJ+NQyLikN00hugp85M6VPHLIZSoncBxYOcfHKcHBYz7xah0zbJHdniG9P4thCcwGC1VvQlER9Dn4E3mcVI5Stviqb9aO2jSsqCa+oopQk4UhNTRPovwA5SuUBlY8hDIt9KiFFtHwfIk77RDkHNycZMW8OEsWh6iLSwpoNMYUgQGaZbJvc46hvT5XX7qaRMTgt3d1snfLFMNTUzz/5J3c8csHmEz38fQf9vGh66/ipGWLCYVMgsBh09ZtzF0uqamPYkYSrFi7hje++TYuuuSam43q0hem032YloVpGsStEJFIiHAkRsKKYEidYrFM2fFxHY+y4xAEVCjulUIqD7dcplB2aWlpZs3KJUxNZ/jDk6+A0HC8MmiVbc9I2Ka1pQZ93sIorufKjuXha3N+Rgzls9TV17LppR6+/A9b+NWddxOrdkjoCzm57t04foo7XtrBqlpBa4fFWEEnEjaQ0w6YJlP7p8mUPYwGi4Kq5MRmsnDCKpNcWiefqcQSx+ZGMMIWriPwvQDNDSCqI1ptjLowoaoYdixUUct+gFfyyA7mmdg5RXZ/Fm/Mp5T2KKU9DNPAtHQCJ0AWA6TjgVQYloEK2WQQOIZieNQhM+Ixq8PGtit7oSXXwNIkLXNN6ufDi88NMdTlc97V1ay7JMr0sKTnYBqlAi64YDmPP7GNh57cyNb9nXhlB5THK7u7GBkXXHDJYuqqFCE7xJbtoxQ9/exHNjzJQH/2xeGjY6Snc5Slj2/6BIZLKK5INpjE60ziNTqxGp1YjUmkRhCtgXA1xKoE1Y0msYRBrpRjdGqA8akJWtuSNDTEqK1PUFsbp7omTKwqXNHjn/jSKpRk7uqLq49pEQNhCsYHfD7/5lf48udv4T3vfjulUpmwXcdzQzfxfPfTPP5sFR9+neRg2uCJvYqquE55ymPs5Skmx/IUDqVZ/w8LyVk2UmoUMhqrFkLHLJMXN5YpZX0MITHrLApjPpmjZaQXVCpq2AItZABaRQyVA2TBJRjL44xkKU8VCeS/1VMCgRU2sRMWkeYQkQaL2gUxiIYrHq+oSTkc4JUClugmp50eJmyBbhlEwgpNSXw0VEjS1+mz8/4iJ58e4aRzW9jw2DSbHs6wcO4cevqPctXr5/OVLz/LssVzQAi6B6ZIZ/Ms6EjS2BhlPOUzMDDFdVddTH+2zDO9vTdHmqJfmB4YxssVsQJBCI2EqdHaVENraz2NdUlqquK0tFTT2FpNNGZjWQLThnjSYmygQDoXsPLkRpyiiy5Bm+G6kIHEKwd4rk/gS0Rrey2BT/sHv7zg4PxTYrFyUeeL79hMR/UKnn7meQaLL9EaWceRid+zYfxz7O+bSxSXk5Y4TOZMbt8aIGQAukb/bycpFfOURgosWdNI42VV9A5p2KZOOe1z2aU62azgxU0uftnHLEm0uEm5JCmNOQTlSlqkZlZYYNRMRQchNYRUBL5LUHDwJgr40yW8ootfdJEFHxGAmBHWagZkO24SXRSjbm0tIdPGyUl8W8OIhVjVKFiwKoLUBHNqBVFbUHZspgseNe0umR6NJ+8o0LLA4KST62iuD/HzrxzCLDRw08dO5Lrrfsa3v/IOWpua+eq3HyJRm2TDpr0EvsHpJ3RwzZXruPjcddiNp/Lt7/+CW5979GbXUF9QYRMlZtwqXkBQcpFlF+X7CE8hfIkFREwL27YI6wYxU6ejqYaG+ji6IYhGTGJhi0jYJBIxiMbCNDVUUVObwLZ0RMgOU3Y8bnjPwk3XfLhx/W03H2XbH/Js3PQ87fPreaD77SSsdpziME6QQYpa4mYGLwDLEDzVCRv7AxIejOzKk9rUh31SDOf5Ahd8aQH9JYHrm5SzAfVxl/PPi9HbH/DKdh+URE77OGUFER3f8fBzPkIXCFOrOMrR0YSO0CoLBDyFFtbQNYnvuLhlD5lxcFMOXt5DOhKlRIUiKF1CjhfRDUFiRZKmVQ0YIZ1iwSc1VKI2obP4pBqWrUmwvEVDaDqup8jkysRiFt3dEqsuz+hBBy2X5NyL5lKaUmz93Ri/+tlOHn/ki0gnz0Ra8fzm3Vxy5iJu++VLnL6mieamegzDYsnCFjbv7OEfv3IXen31zWpRwxc4XstAq+yyVypzVUptSirGrpSV2qtCgpCAT+X9OB74AUIqRKDQPYkWSGK2TlXUpiYZQvcDiUCjriZe63jBBb/67hF+/OPvct65lzHtHMbSQkwXOynLEWpDLZjCxfHdmb0/QUMU9g0qciXQhEH5WBatXlHyFaFUiAXnh8ilwUNneMQlbEmWLAwTswXDoz563MC0NGSuUltURLWZbSyF0AXoAtOo1IwQSqD5FWD1sE6oKoJdEyPUHMNoS6A1xyEeQtgGetJCNETB8xFZl9xQXrz/tR/4ea4v96lowvxu65LqT+jxKF2b02Rdg1hNiLqYxDA1pGcAAaYO6SmDxSeAFffY9PQEHhot6yHa7DJ9NMCfloxP5+nu7+fsE+aw58gITtnlC998gN8+somNm/fxzMbDvPbycxkvZ8/O2OIWXQj/1d0gNbP/NrOTIpSq/ExlPavrorK0MTT0sIEVszGTNnZ1BLMmglkXRa+N4SZCpC2TUV9iKBUQiycie3aMb9i/u6TeeuO14s03vJOynMbXJ1lXfyO+O0mvP4QvXVyvWBGJShBIRXVU56TWgMc7JWZMYcyOU943QfX51fQ8Nk37JWEWLRCMD1vkcxabdrnUJFzmzbHQDJMduyS+ZRJp0fGzPm7Wr4xSUwNDQyqB0irVvXQdlA3KBT/v4+WCSkiJraEMicq4iJESmi5Rlo4GyEBSU1PNTR95/41SydsBTGEYgy+NJtdcPr/mLTetODgxWti8Y1/5nEzaYEmHTzRu4Po69XUC25LkRqJEkj6nX6MYPDTBoe0arStaIHmYXft30bfV5fA2B0tqnH/OWsq5PJa2gUWL2zn/onUMTvvccM3rePnm/QS+rLYtfUQoIFBIUdklEzPTV0hROYY6voVGMPO9kBX1oh33iaNQVOq1aULDNgVYRiWS+4knv1r68Ie/UV32zO6vfu2WGHjmdLDVtrV4aDi3XR/Mb8IggucXQMg/LnSVxPMFJ8zW2dTvkXchsiRBfucYlqvBCWH2/TrDSTfV0d6mqI1G2LJX8cSGHJedHaKjPYJhwe4dZXIZhZk0MRIWQdbDTVfEqbANgpBOoAIoSkdoZDVNywhbZHRIyUBmSlPlbDBazvgFN6OqrYyImFkhVQZNS0tPpqPRSKa9rX38uFHlKX8MQAit6pVfH4x8/JaLv1/TVHPOtuEUqZTB3HZFXZ1GSAuIRnRKnoHt2aTGFa3zTWYvUhzbU6J7m07H0hjnnesx+5DOQ1/exMpFaxGGxXVXn4cd0bnikpO57e7n2PDSi6RHpjHiDaGZaCgqtfkq3x8XycdNwJmjFftgJvRFohDqT8JuxB8jL5gpAiUqW5aVw0uWz+b7P7wtfO6ZF7ftHnpw8ezm9jXCSa58tu/TC5xguN4QdlgqFQZMEJpScuZPVkbIhi6HR3ZJDKEx9dIoQWeG1g/NY/qVHC2tUVZfGXdi6Fm/TObl3eXMVLqQOufEcGb2nGg2U5CZ/fu9zOigymimntVNMlKSdope2km5GVVWWSWDTKBUGamjhEQi0XwFfuVBpQk+VEi6ZMUSkQIyL3ezqLaV93zwfbz/fTf9G6u58m70ZqWCkfPevUapDpvqqGD17AjzO3QCpSg4FoYIKClIagEpVxCPK9y8z4HtPhMZj5qlRWpCcPRxn/E+OG/Neo71TpGwIhzoHeRLn3k7H/3yjzmoe62RmD183EskZiSvr4ESlT1kTb0a4HLc0zoTbwyakvzJUHi1yePnwx9BPd56c5uRMqA9tky82HuzMVzYUGfr4blKiLkoMVspWhUyXKFlFA5Q0ITIBUpkf7nByR6d1DO4pEd+uC9ds7o60/iGxuzgc4VM++JE+ZSzI4SFjqYEm3bnOXCkxNJ5IdasDGHFA472evR3SUp5E6FXyJqloYGUyJLEK/ioUoBMe0jXR1iV+qJSBqColOAytApJ5syon3r2MGva5nHjO2/kAx/4+J8FFSAaimqu48Q95WfO+dSJH2pst885dUn0yuYanbKn4yuFq3xsERAoEzMQKE0QiSqyU5KhrhIlr4yZgEjcQPfKhFWcg7sn6T/qMXZQ0Y8qi/kNUR0lEQoxI2aVJghExdrXAF3NJBC/Oif/aNNXQONfQfrHM9SfI8eaHT/l1fPOn/cdDxi5b/8ZIwo2VgJlxYxIOH4pkEqhazpvXG+y5ZjPloEEpauXMPqL3VR1RFl4UZK9T5cJTI1zT4tjCDhzTZyWKsGmfT7pVMD8BYLZswXVScnQgMPYgE6hoCEMhWaDHhFoEQMlTVSDTVD0CMqglQOCokS5QWV32NYqsUBSVka1F1CVTOKWCn8RUIBCuSCBTNQMaQWv/N3Vb12yoaxhnr8wfGlrHFy9kn3gBBo2IHRFECjcoiAeNVl1gkkxGyZf1BgZ8pkeBvwSDW1VxFpcDu/oh9rabRhCHi93GWgVoI5bvwiBkDNAvxpseNzrXzlPiJkZLV8NeZv5//jWwN+Q9QZw7fKX/82xe/adUdk1oSIMpJKEbJ0LVvhE7BQPyQaqr1jK4V8e5Jx5yzj38jDPPl3CcSSXnBknapssnxdDw2Uo6zM86TOR9ZjbpjFrlk9TC0xOSCaHBakJ8JWGbmtopqxYxnEdMybQlIH0BG6Rim/VDRDKRzMFniOgGDB37mxS6cm/5VEpeGUJ0PmrY7t333noslM+vfpjS1fGv76wSqclbhE3dXwUJSnRDI7zKIBu0T3oc3hvhrUrksw/uRbP91GBRv9Qllmrw+zukQ9YmoJAgKjsF1eC1wQalbglKSq5TMd1aSULYAa+V3d1ju/r/On8rZynCYFe3xBi3UmnkwqOIpXPKwNfZ3bV2X/14Vc0vp0VDZV+YPwOhBCYYYFSFtP9iqkc+M1xkBrdD/aw9vx61p0coedwmT0HStTVhaiO69RUBYwXPWRYErFsjvT5OHkNU5dUV0Fbq6C+EQxdIR3wywZ+PoRyjMq+YADK1ZAeoEuiVYp4IygE2YESbvcUr7vyIrp7ernq6mv/JmABPvO5zyqAD77uw1sGU959vabwu4rlUzIlF01J4pZG1FRYBvjSZCJnUN9isjtV4oHf97J3b4b9PQVGigFTrsfuPwyPykTyHXoy7KIUUlTEbuVL/2O4qarMuj9yOHA8evQ4dBVL+PgR8ceuEEihEI6XQwoXicuB8d+wf/J2wnoUcVzMMhN1oCTXrvi3Mxbg/kNnMDkE40OwfF2IUl7jsWdLbJ/UEXGDqUe7kEMprvjnhTQ1aOw5CPu7JcsWRVm3RCMwJVs7Xey4Rq1l0NXtUfJ8bDsgFBKETQ3L0jCtABVIyiWdXNqs6F6hEWgBwvDRDR8VSIopxfSUonR0isIrvfzsx7fwjnd94m8G9M+1WE1Uj59QPTd6UtWN4RZ7aX1Iq03I4PSQoVEsCo4OFEBXmGEbX2h4vsKTElf6ZJ+YDOS+/OU15yx+QsVDFafLjCEn1HFU+BegHtelxy3k4waTUlTqkCte/Z3KjxLF8WuqgLFSJ0X3KBuGv4KhzMpF1IzqlX9MAVAcV9IVj821K17inv1ngFJ4QP9Rn8Ov/H9KO5cQOYowjv++6p6emc7s7uwjm2U1spEQkESiggFBg1FE8CAYxGMIyc2bBw/ePGnYm6dlA0ESDwk5BUGPOQiSvUh8rea06m42S2ZhzOy8unrq4aG6Z4PezHdrGqqb+n+vf/GvKsOp1yc48rxw+SvNDzuKRjPi4Y3fEZPx0ofHWGwmmFSz3tK4bo2Xj9ZJpz3rG5ZGU3h2KmW3k7PZ0gwz8DpCuQglIWJrqSFKHM6AtwrrhMEA9vYsIw0jJxgFnbW/mN02XL9xmdNn3nsiUEs70Ehr/d4gWzy7dKZyKL0d1apIIiQxiHIkHioShN6d3QGtu62OXh+ea5545uvo8GxQKxLue7eUnLMAqIzS4tmNQS7mv3ihSvFB0WhJ0eyWV4xLK9tgL9/gx9Yl+voRVWngncN5V+T6x0YLvkNJskJBD7o/8YqReB797fjupubwErz5/gyXrmZs9SJqVXhw5S5pHU5+dIx8AIdmoD6n2NkW6tWIufmI7Z2c3Hmemk+YnIgY5o5229FvC3lXoQcKnXu0cRjnMBKaClHhn53ziBdybXm4tsHFF97m9FuvsvLl59y5/d8tJv/XJhbmKypReRR7jDFBq1sRKolCBLJO1h51zLV4urE8eXxxJ5qqYx1jbjmunyVg+4RzP9X6/UWJf5tICKyiLD9mHmn1/+CX3WWMH5LIQe7vfU+k1NhDZOwVfv9DxSCOcNa+sUMkdjgb8+dmTKWWsnarzdOzESffnWP5ehcmE5KR5f7qz0wuxJz69CgPfo2o2ITnXsyhaun1FFP1sOh/b8txIDUcnBHSOsSxxxpPnilMJnS70O/BMPOMjKBHHmPDkbZOe3Se013b5NZnq3xxZYXznyywda/Dxxe+eSIwP3jnFW5+e4cjZ1+rGDN6Q4xb8sY2nbZVq402xmx7539TET8l06mNmrUw+S7MvitACvSjyIhexk0PCOJDd+zLfBv0KgGwgpCWoMrYGUJV9gL/APQ/V5KZmbWSAAAAAElFTkSuQmCC
"
$iconimageBytes = [Convert]::FromBase64String($base64IconString)
$ims = New-Object IO.MemoryStream($iconimageBytes, 0, $iconimageBytes.Length)
$ims.Write($iconimageBytes, 0, $iconimageBytes.Length);
$alkIcon = [System.Drawing.Image]::FromStream($ims, $true)
$Form.Icon = [System.Drawing.Icon]::FromHandle((new-object System.Drawing.Bitmap -argument $ims).GetHIcon())









################## CONTROL FUNCTIONS########################################################

# Activity Log (Saves to user's Desktop)
$logLocation = [Environment]::GetFolderPath("Desktop") + "\T-REX RAPID RESPONSE ACTION LOG.txt"
function logAction ($action) {
  $dateTime = Get-Date
  Add-Content "$logLocation" "$dateTime | $action"
}


#######       END OF CONTROL FUNCTIONS       #######
####################################################




#######       FILE PATHS       #######
#####################################################




function setFilePath {
  $initialDirectory = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::Desktop)
  $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
  $OpenFileDialog.initialDirectory = $initialDirectory
  $OpenFileDialog.filter = "All files (*.*)| *.*"
  $OpenFileDialog.ShowDialog() | Out-Null
  $filePath = $OpenFileDialog.filename
  $filePathBox.text = $filePath
}




################################################################################
################################################################################


#######       START OF BUTTON FUNCTIONS       #######
#####################################################


#Machine Report Button Function - Generates a report of logins, scheduled tasks, and installed software in 1 HTML report.
function MACHINEREPORT {
  $outputBox.AppendText("Running All Machine Reports.......`n`n`n" + [Environment]::NewLine)


  $outputBox.AppendText("`n`n`n Running Report 1 of 18.....`n`n`n " + [Environment]::NewLine)
 
  pcinfo

  $outputBox.AppendText("`n`n`n Running Report 2 of 18.....`n`n`n " + [Environment]::NewLine)

  LOCALACCOUNTS

  $outputBox.AppendText("`n`n`n Running Report 3 of 18.....`n`n`n " + [Environment]::NewLine)

  FIREWALLRULES

  $outputBox.AppendText("`n`n`n Running Report 4 of 18.....`n`n`n " + [Environment]::NewLine)

  NETSTATCONNECTIONS

  $outputBox.AppendText("`n`n`n Running Report 5 of 18.....`n`n`n " + [Environment]::NewLine)

  LogonReport

  $outputBox.AppendText("`n`n`n Running Report 6 of 18.....`n`n`n " + [Environment]::NewLine)

  ANTIVIRUS

  $outputBox.AppendText("`n`n`n Running Report 7 of 18.....`n`n`n " + [Environment]::NewLine)

  WEBHISTORY

  $outputBox.AppendText("`n`n`n Running Report 8 of 18.....`n`n`n " + [Environment]::NewLine)

  CheckMaliciousScripts

  $outputBox.AppendText("`n`n`n Running Report 9 of 18.....`n`n`n " + [Environment]::NewLine)

  SCHEDULEDTASKS

  $outputBox.AppendText("`n`n`n Running Report 10 of 18.....`n`n`n " + [Environment]::NewLine)

  INSTALLEDSOFTWARE

  $outputBox.AppendText("`n`n`n Running Report 11 of 18.....`n`n`n " + [Environment]::NewLine)

  WIFINETWORK

  $outputBox.AppendText("`n`n`n Running Report 12 of 18.....`n`n`n " + [Environment]::NewLine)

  STARTUP

  $outputBox.AppendText("`n`n`n Running Report 13 of 18.....`n`n`n " + [Environment]::NewLine)

  USBDEVICE

  $outputBox.AppendText("`n`n`n Running Report 14 of 18.....`n`n`n " + [Environment]::NewLine)

  RUNNINGPROCESS

  $outputBox.AppendText("`n`n`n Running Report 15 of 18.....`n`n`n " + [Environment]::NewLine)

  EVENTVIEWER

  $outputBox.AppendText("`n`n`n Running Report 16 of 18.....`n`n`n " + [Environment]::NewLine)

  ImageThumbnails
  
  
  $outputBox.AppendText("`n`n`n Running Report 17 of 18.....`n`n`n " + [Environment]::NewLine)

  Browserext

   $outputBox.AppendText("`n`n`n Running Report 18 of 18.....`n`n`n " + [Environment]::NewLine)

  UserDownloads



  $outputBox.AppendText("`r`n`n`r All Reports Completed." + [Environment]::NewLine)


  #get the computername
  $ComputerName = $env:COMPUTERNAME
 
  #define the folderpath
  $folderPath = [System.IO.Path]::Combine($env:USERPROFILE, 'Desktop', "$ComputerName TREX REPORTS")
  
  #open the folder path
  start $folderPath
}

###############################################################################################################################################################################







function pcinfo {

  $outputBox.AppendText("`n`n`r Running PC Info Report..." + [Environment]::NewLine)


  param (
    [string]$ComputerName = $script:globalComputerName
  )

  # Define the folder path on the local PC's desktop
  $ReportFolder = "$env:USERPROFILE\Desktop\$script:globalComputerName TREX REPORTS"

  # Create the folder if it doesn't exist
  if (-not (Test-Path -Path $ReportFolder)) {
    New-Item -Path $ReportFolder -ItemType Directory
  }

  # Import the Active Directory module
  Import-Module ActiveDirectory -ErrorAction SilentlyContinue

  # Get the current date and time
  $CurrentDateTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

  # Get information from the remote computer
  $ComputerSystem = Get-WmiObject -Class Win32_ComputerSystem -ComputerName $ComputerName
  $Memory = Get-WmiObject -Class Win32_PhysicalMemory -ComputerName $ComputerName
  $DiskDrive = Get-WmiObject -Class Win32_DiskDrive -ComputerName $ComputerName
  $Processor = Get-WmiObject -Class Win32_Processor -ComputerName $ComputerName
  $Bios = Get-WmiObject -Class Win32_BIOS -ComputerName $ComputerName
  $Battery = Get-WmiObject -Class Win32_Battery -ComputerName $ComputerName

  # Get the Organizational Unit (OU) information using Get-AdComputer
  try {
    $OU = (Get-AdComputer -Identity $ComputerName).DistinguishedName
  } catch {
    $OU = "N/A"
  }

  # Create the HTML report content
  $ReportContent = @"
<html>
<head>
    <title>PC Information Report</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h1>PC Information Report - $CurrentDateTime</h1>
    <table>
        <tr>
            <th>Attribute</th>
            <th>Value</th>
        </tr>
        <tr>
            <td>Computer Name</td>
            <td>$($ComputerSystem.Name)</td>
        </tr>
        <tr>
            <td>Domain</td>
            <td>$($ComputerSystem.Domain)</td>
        </tr>
        <tr>
            <td>OU</td>
            <td>$OU</td>
        </tr>
        <tr>
            <td>RAM</td>
            <td>$($Memory.PartNumber), $([Math]::Round($Memory.Capacity / 1GB, 2)) GB</td>
        </tr>
        <tr>
            <td>Hard Drive</td>
            <td>$($DiskDrive.Manufacturer) $($DiskDrive.MediaType), $([Math]::Round($DiskDrive.Size / 1GB, 2)) GB</td>
        </tr>
        <tr>
            <td>Processor</td>
            <td>$($Processor.Name)</td>
        </tr>
        <tr>
            <td>Serial Number</td>
            <td>$($Bios.SerialNumber)</td>
        </tr>
        <tr>
            <td>Battery Status</td>
            <td>$($Battery.EstimatedChargeRemaining)%</td>
        </tr>
    </table>
</body>
</html>
"@

  # Save the report to an HTML file with the filename "PCINFO_Report.html"
  $ReportPath = Join-Path $ReportFolder "PCINFO_Report.html"
  $ReportContent | Out-File -FilePath $ReportPath -Force

  $outputBox.AppendText("`n`n`r Report Generated for $ComputerName and saved to: $ReportPath" + [Environment]::NewLine)

    
}







###############################################################################################################################################################################
function MACINFO {
  #logAction "Starting Mac Info Tool."
  $outputBox.AppendText("Looking Up MAC Address Vendor Information..." + [Environment]::NewLine)
    
  #INSERT SCRIPT TO PERFORM HERE


  Add-Type -AssemblyName System.Windows.Forms

  $form = New-Object System.Windows.Forms.Form
  $form.Text = 'MAC'
  $form.Width = 350
  $form.Height = 200
  $form.StartPosition = 'CenterScreen'

  $label = New-Object System.Windows.Forms.Label
  $label.Location = New-Object System.Drawing.Point(10, 20)
  $label.Size = New-Object System.Drawing.Size(280, 20)
  $label.Text = 'Please enter a MAC address:'
  $form.Controls.Add($label)

  $textbox = New-Object System.Windows.Forms.TextBox
  $textbox.Location = New-Object System.Drawing.Point(10, 40)
  $textbox.Size = New-Object System.Drawing.Size(260, 20)
  $form.Controls.Add($textbox)

  $button = New-Object System.Windows.Forms.Button
  $button.Location = New-Object System.Drawing.Point(180, 80)
  $button.Size = New-Object System.Drawing.Size(90, 30)
  $button.Text = 'OK'
  $button.DialogResult = [System.Windows.Forms.DialogResult]::OK
  $form.AcceptButton = $button
  $form.Controls.Add($button)

  $form.Topmost = $true

  $dialogResult = $form.ShowDialog()

  if ($dialogResult -eq [System.Windows.Forms.DialogResult]::OK)
  {
    $macAddress = $textbox.Text

    Add-Type -AssemblyName System.Net.Http
    $httpClient = New-Object System.Net.Http.HttpClient

    $url = "https://api.macvendors.com/$macAddress"

    try {
      $response = $httpClient.GetAsync($url).GetAwaiter().GetResult()
      $result = $response.Content.ReadAsStringAsync().GetAwaiter().GetResult()

      $outputBox.AppendText("MAC address information for $macAddress" + [Environment]::NewLine)
      outputBox.AppendText("$result" + [Environment]::NewLine)
      # logAction "$result."
        
    }
    catch {
        
      $outputBox.AppendText("" + [Environment]::NewLine)
          
    }
  }

  
  $outputBox.AppendText("$result" + [Environment]::NewLine)
}

###############################################################################################################################################################################
function TINYURL {
  Add-Type -AssemblyName System.Windows.Forms

  $form = New-Object System.Windows.Forms.Form
  $form.Text = 'Enter Shortened URL'
  $form.Width = 400
  $form.Height = 200
  $form.StartPosition = 'CenterScreen'

  $label = New-Object System.Windows.Forms.Label
  $label.Location = New-Object System.Drawing.Point(10, 20)
  $label.Size = New-Object System.Drawing.Size(280, 20)
  $label.Text = 'Enter a shortened URL:'
  $form.Controls.Add($label)

  $textbox = New-Object System.Windows.Forms.TextBox
  $textbox.Location = New-Object System.Drawing.Point(10, 40)
  $textbox.Size = New-Object System.Drawing.Size(360, 20)
  $form.Controls.Add($textbox)

  $button = New-Object System.Windows.Forms.Button
  $button.Location = New-Object System.Drawing.Point(280, 80)
  $button.Size = New-Object System.Drawing.Size(90, 30)
  $button.Text = 'OK'
  $button.DialogResult = [System.Windows.Forms.DialogResult]::OK
  $form.AcceptButton = $button
  $form.Controls.Add($button)

  $form.Topmost = $true

  $dialogResult = $form.ShowDialog()

  if ($dialogResult -eq [System.Windows.Forms.DialogResult]::OK) {
    $url = $textbox.Text

    try {
      $response = Invoke-WebRequest -MaximumRedirection 0 -Uri $url
      $location = $response.Headers.Location
      $statusCode = $response.StatusCode
      $vendor = $response.Headers.'X-Powered-By'

      $outputBox.AppendText("Result for $url" + [Environment]::NewLine)
      $outputBox.AppendText("Location: $location" + [Environment]::NewLine)
      $outputBox.AppendText("Status code: $statusCode" + [Environment]::NewLine)
      $outputBox.AppendText("Vendor: $vendor" + [Environment]::NewLine)
    }
    catch {
      $outputBox.AppendText("`n`n`r Error fetching $url." + [Environment]::NewLine)
    }
  }
}

###############################################################################################################################################################################
#function to check the MD5 Hash of a file

function HASH {
  # logAction "Hash Tool Started"
  $outputBox.AppendText("Hash Tool Started." + [Environment]::NewLine)

  # Add Windows Forms assembly
  Add-Type -AssemblyName System.Windows.Forms

  # Create a new form
  $form = New-Object System.Windows.Forms.Form
  $form.StartPosition = 'CenterScreen'
  $form.Size = New-Object System.Drawing.Size(500,240) # Horizontal, Vertical
  $form.Text = "FILE SHA CHECKER"
  $form.BackColor = "white"

  # Create a label to prompt user to select a file
  $label = New-Object System.Windows.Forms.Label
  $label.Location = New-Object System.Drawing.Size(7,40) # Horizontal, Vertical
  $label.Size = New-Object System.Drawing.Size(330,35)
  $label.BackColor = "Transparent"
  $label.ForeColor = "black"
  $label.Text = "PLEASE SELECT A FILE TO GET HASH"
  $form.Controls.Add($label)

  # Create a button to select a file
  $button = New-Object System.Windows.Forms.Button
  $button.Text = 'Get file'
  $button.Location = '10,110' # Horizontal, Vertical
  $form.Controls.Add($button)

  # Create a textbox to display the selected file path
  $textbox = New-Object System.Windows.Forms.TextBox
  $textbox.Location = '100,110' # Horizontal, Vertical
  $textbox.Width += 50
  $form.Controls.Add($textbox)

  # Create an OK button
  $buttonOK = New-Object System.Windows.Forms.Button
  $buttonOK.Text = 'Ok'
  $buttonOK.Location = '10,140' # Horizontal, Vertical
  $buttonOK.DialogResult = 'OK'
  $form.Controls.Add($buttonOK)

  # Define button click event to select a file
  $button.add_Click({
      $ofd = New-Object system.windows.forms.Openfiledialog
      #$ofd.Filter =  'PDFs (*.pdf)|*.pdf' 
      $script:filename = 'Not found'
      if ($ofd.ShowDialog() -eq 'Ok') {
        $script:filename = $textbox.Text = $ofd.FileName
      }    
  })

  # Define OK button click event to get file hash
  $buttonOK.add_Click({
      # Get the file hash
      $hash = Get-FileHash $textbox.Text | Select-Object -ExpandProperty Hash
        

      # Show the file hash in a message box
      #[System.Windows.Forms.MessageBox]::Show("The file hash is: $hash", "File Hash")
      logAction "FILE:"
      logAction ($textbox.text)
      logAction "HASH:"
      logAction ($hash)
       
      $outputBox.AppendText($textbox.text + [Environment]::NewLine)
      $outputBox.AppendText("Hash:$hash" + [Environment]::NewLine)
       
        
  })

  # Show the form as a dialog
  $form.ShowDialog() | Out-Null
    


}
###############################################################################################################################################################################
function WHOIS{
  $outputBox.AppendText("Opening WHOIS Tool in separate window..." + [Environment]::NewLine)

  Add-Type -AssemblyName System.Windows.Forms

  function Get-WhoisInformation {
    $form = New-Object System.Windows.Forms.Form
    $form.Size = New-Object System.Drawing.Size(400, 600)
    $form.Text = "Whois Lookup"

    $ipLabel = New-Object System.Windows.Forms.Label
    $ipLabel.Location = New-Object System.Drawing.Point(20, 20)
    $ipLabel.Text = "Enter IP Address or URL:"

    $ipTextBox = New-Object System.Windows.Forms.TextBox
    $ipTextBox.Location = New-Object System.Drawing.Point(20, 50)
    $ipTextBox.Size = New-Object System.Drawing.Size(200, 20)

    $outputTextBox = New-Object System.Windows.Forms.TextBox
    $outputTextBox.Location = New-Object System.Drawing.Point(20, 100)
    $outputTextBox.Size = New-Object System.Drawing.Size(360, 420)
    $outputTextBox.Multiline = $true
    $outputTextBox.ScrollBars = "Vertical"
    $outputTextBox.ReadOnly = $true
    $outputTextBox.Font = New-Object System.Drawing.Font("Consolas", 10)

    $lookupButton = New-Object System.Windows.Forms.Button
    $lookupButton.Location = New-Object System.Drawing.Point(230, 50)
    $lookupButton.Size = New-Object System.Drawing.Size(150, 20)
    $lookupButton.Text = "Lookup"
    $lookupButton.Add_Click({
        $input = $ipTextBox.Text

        if ($input -as [ipaddress]) {
          # Input is an IP address
          $ip = $input
          try {
            $resolvedUrls = Resolve-DnsName -Name $ip -Type PTR -ErrorAction Stop | Select-Object -ExpandProperty NameHost
            $resolvedUrl = $resolvedUrls -join ', '
          } catch {
            $resolvedUrl = "Unable to resolve IP to URL."
          }
        } else {
          # Input is a URL
          try {
            $resolvedIps = Resolve-DnsName -Name $input -ErrorAction Stop | Where-Object { $_.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' } | Select-Object -ExpandProperty IPAddress
            $ip = $resolvedIps -join ', '
            $resolvedUrl = $input
          } catch {
            $resolvedUrl = "Unable to resolve URL to IP."
          }
        }

        $apiUrl = "http://ip-api.com/json/$ip"
        $webClient = New-Object System.Net.WebClient
        $whoisResult = $webClient.DownloadString($apiUrl)
        $formattedResult = $whoisResult | ConvertFrom-Json | ConvertTo-Json -Depth 10
        $formattedResult = $formattedResult.Replace('"', '')

        # Add IP address and resolved URL to the result
        $formattedResult = "IP Address(s): $ip`r`nResolved URL(s): $resolvedUrl`r`n" + $formattedResult

        $outputTextBox.Text = $formattedResult
    })

    $form.Controls.Add($ipLabel)
    $form.Controls.Add($ipTextBox)
    $form.Controls.Add($outputTextBox)
    $form.Controls.Add($lookupButton)

    $form.Add_Shown({$form.Activate()})
    [void]$form.ShowDialog()
  }

  function Format-Json {
    param($json)
    $indentSize = 4
    $indentChar = " "

    $result = ""

    $quoteEscapeChar = '\u005C"'
    $quoteChar = '"'
    $newlineChar = "`r`n"

    $indentLevel = 0
    $inString = $false

    for ($i = 0; $i -lt $json.Length; $i++) {
      $currentChar = $json[$i]

      if ($currentChar -eq $quoteChar -and ($i -eq 0 -or $json[$i -1] -ne $quoteEscapeChar)) {
        $inString = !$inString
      }

      if ($inString) {
        $result += $currentChar
        continue
      }

      switch -regex ($currentChar) {
        '\{' {
          $result += $currentChar + $newlineChar + ($indentChar * ($indentLevel + 1))
          $indentLevel++
          break
        }
        '\[' {
          $result += $currentChar + $newlineChar + ($indentChar * ($indentLevel + 1))
          $indentLevel++
          break
        }
        '\}' {
          $indentLevel--
          $result = $result.TrimEnd("`r", "`n", $indentChar)
          $result += $newlineChar + ($indentChar * $indentLevel) + $currentChar
          break
        }
        '\]' {
          $indentLevel--
          $result = $result.TrimEnd("`r", "`n", $indentChar)
          $result += $newlineChar + ($indentChar * $indentLevel) + $currentChar
          break
        }
        ',' {
          $result += $currentChar + $newlineChar + ($indentChar * $indentLevel)
          break
        }
        ':' {
          $result += " -"
          break
        }
        default {
          $result += $currentChar
          break
        }
      }
    }

    $result
  }

  Get-WhoisInformation
}


###############################################################################################################################################################################



function LOCALACCOUNTS {

  $outputBox.AppendText("`n`n`r Checking for Computer Accounts... " + [Environment]::NewLine)

  param (
    [string]$ComputerName = $script:globalComputerName
  )

  $currentUserDesktop = [System.IO.Path]::Combine($env:USERPROFILE, 'Desktop')
  $reportFolderName = "$ComputerName TREX REPORTS"
  $outputFolder = [System.IO.Path]::Combine($currentUserDesktop, $reportFolderName)
  $outputFile = [System.IO.Path]::Combine($outputFolder, 'UserProfilesAndLocalAdminsReport.html')
  $currentDateTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

  # Create output folder if it doesn't exist
  if (-not (Test-Path -Path $outputFolder)) {
    New-Item -ItemType Directory -Path $outputFolder | Out-Null
  }

  # Invoke command on the remote machine to get local admin accounts and user profiles
  $htmlContent = Invoke-Command -ComputerName $ComputerName -ScriptBlock {
    # Get the built-in administrators group
    $administratorsGroup = Get-LocalGroup -Name Administrators

    # Get all local user accounts
    $localUsers = Get-LocalUser | Where-Object { $_.Enabled -eq $true }

    # Get all user profiles on the computer
    $userProfiles = Get-WmiObject Win32_NetworkLoginProfile

    # Start building HTML content
    $htmlContent = "<html><head><style>"
    $htmlContent += "table { border-collapse: collapse; width: 100%; }"
    $htmlContent += "th, td { border: 1px solid #dddddd; text-align: left; padding: 8px; }"
    $htmlContent += "th { background-color: #f2f2f2; }"
    $htmlContent += "</style></head><body>"
    $htmlContent += "<h2>User Profiles and Local Admins Report - $env:COMPUTERNAME</h2>"
    $htmlContent += "<p>Report generated on: $using:currentDateTime</p>"
    $htmlContent += "<h3>Local Admin Accounts:</h3>"
    $htmlContent += "<table><tr><th>Account Name</th><th>Account SID</th><th>Is Admin Account</th></tr>"

    # Output local user information
    foreach ($user in $localUsers) {
      $isAdmin = $administratorsGroup | Get-LocalGroupMember -Member $user -ErrorAction SilentlyContinue
      $isAdmin = [bool]$isAdmin  # Convert to boolean
      $htmlContent += "<tr>"
      $htmlContent += "<td>$($user.Name)</td>"
      $htmlContent += "<td>$($user.SID)</td>"
      $htmlContent += "<td>$isAdmin</td>"
      $htmlContent += "</tr>"
    }

    $htmlContent += "</table>"
    $htmlContent += "<h3>All User Profiles:</h3>"
    $htmlContent += "<table><tr><th>User Profile</th></tr>"

    # Output user profile information
    foreach ($profile in $userProfiles) {
      $htmlContent += "<tr>"
      $htmlContent += "<td>$($profile.Name)</td>"
      $htmlContent += "</tr>"
    }

    # End HTML content
    $htmlContent += "</table></body></html>"

    # Output the HTML content
    $htmlContent
  }

  # Save HTML content to a file
  $htmlContent | Out-File -FilePath $outputFile

  # Open the file
  #Invoke-Item $outputFile

  # Notify the user
  $outputBox.AppendText("`n`n`r Local Admin Accounts and User Profile Check completed.`n`n`r The Report is saved to:`r`n`n $outputFile`n`n " + [Environment]::NewLine)
  
}














###############################################################################################################################################################################





function FIREWALLRULES {

  $outputBox.AppendText("`n`n`r Running Firewall Rule Report... `r`n`n`n`n" + [Environment]::NewLine)


  param (
    [string]$ComputerName = $script:globalComputerName
  )

  # Define the report folder path
  $reportFolder = [System.IO.Path]::Combine($env:USERPROFILE, 'Desktop', "$ComputerName TREX REPORTS")

  # Create the folder if it doesn't exist
  if (-not (Test-Path $reportFolder)) {
    New-Item -ItemType Directory -Force -Path $reportFolder
  }

  # Define the report file path
  $reportPath = Join-Path -Path $reportFolder -ChildPath 'FirewallRulesReport.html'

  # Invoke command on the remote machine to get firewall rules
  $firewallRules = Invoke-Command -ComputerName $ComputerName -ScriptBlock {
    Get-NetFirewallRule | Sort-Object DisplayName
  }

  # Count of rules
  $ruleCount = $firewallRules.Count

  # Current date and time
  $reportDateTime = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'

  # HTML content
  $htmlContent = @"
<!DOCTYPE html>
<html>
<head>
    <title>Firewall Rules Report - $ComputerName</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
        }
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }
        th {
            background-color: #f2f2f2;
        }
        .disallowed-rule {
            color: red;
        }
    </style>
</head>
<body>
    <h2>Firewall Rules Report - $ComputerName</h2>
    <p>Report Date and Time: $reportDateTime</p>
    <p>Total Firewall Rules: $ruleCount</p>
    <table>
        <tr>
            <th>Display Name</th>
            <th>Action</th>
            <th>Direction</th>
            <th>Enabled</th>
            <th>Profile</th>
            <th>Local Address</th>
            <th>Remote Address</th>
            <th>Protocol</th>
            <th>Local Port</th>
            <th>Remote Port</th>
            <th>Program</th>
            <th>Service</th>
        </tr>
"@

  # Populate HTML content with firewall rules
  $firewallRules | ForEach-Object {
    # Check if the rule is disallowed and apply CSS class accordingly
    $disallowedClass = if ($_.Action -eq 'Allow' -and -not $_.Enabled) { 'disallowed-rule' } else { '' }

    $htmlContent += @"
        <tr class="$disallowedClass">
            <td>$($_.DisplayName)</td>
            <td>$($_.Action)</td>
            <td>$($_.Direction)</td>
            <td>$($_.Enabled)</td>
            <td>$($_.Profiles -join ', ')</td>
            <td>$($_.LocalAddress -join ', ')</td>
            <td>$($_.RemoteAddress -join ', ')</td>
            <td>$($_.Protocol -join ', ')</td>
            <td>$($_.LocalPort -join ', ')</td>
            <td>$($_.RemotePort -join ', ')</td>
            <td>$($_.Program)</td>
            <td>$($_.Service)</td>
        </tr>
"@
  }

  $htmlContent += @"
    </table>
</body>
</html>
"@

  # Write the HTML content to the file
  $htmlContent | Out-File -FilePath $reportPath

  # Output the file path

  $outputBox.AppendText("`n`n`r Firewall Rule Check completed. `n`n`r`n`n The Report is saved to:`r`n`n $reportPath`n`n" + [Environment]::NewLine)

  

  # Open the HTML report in the default web browser
  #Invoke-Item $reportPath
}












###############################################################################################################################################################################


function NETSTATCONNECTIONS {
  param (
    [string]$ComputerName = $script:globalComputerName
  )

  $outputBox.AppendText("`n`n`r Starting Netstat Report...`r`n`n`n" + [Environment]::NewLine)

  # Use Invoke-Command to run Netstat remotely
  $NetstatOutput = Invoke-Command -ComputerName $ComputerName -ScriptBlock {
    netstat -a
  }

  # Get the current date and time
  $CurrentDateTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

  # Create a folder path for the reports on the desktop
  $FolderPath = [System.IO.Path]::Combine($env:USERPROFILE, 'Desktop', "$ComputerName TREX REPORTS")

  # Create the folder if it doesn't exist
  if (-not (Test-Path -Path $FolderPath -PathType Container)) {
    New-Item -Path $FolderPath -ItemType Directory | Out-Null
  }

  # Define the file path for the HTML report
  $ReportFilePath = [System.IO.Path]::Combine($FolderPath, 'NetstatReport.html')

  # Create an HTML template for the report
  $HtmlTemplate = @"
<!DOCTYPE html>
<html>
<head>
    <title>Netstat Report</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
        }
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h2>Netstat Report - $ComputerName</h2>
    <p>Generated on: $CurrentDateTime</p>
    <table>
        <tr>
            <th>Protocol</th>
            <th>Local Address</th>
            <th>Foreign Address</th>
            <th>State</th>
        </tr>
$($NetstatOutput | ForEach-Object {
        $fields = $_ -split '\s+' | Where-Object { $_ -ne '' }
        "<tr><td>$($fields[0])</td><td>$($fields[1])</td><td>$($fields[2])</td><td>$($fields[3])</td></tr>"
    })
    </table>
</body>
</html>
"@

  # Save the HTML template to the report file
  $HtmlTemplate | Out-File -FilePath $ReportFilePath -Encoding UTF8

  # Display a message with the path to the saved report
  $outputBox.AppendText("`n`n`r Netstat Report completed. `n`n`r`n`n The Report is saved to:`r`n`n $ReportFilePath`n`n" + [Environment]::NewLine)

  # Open the file with the default associated program
  #Invoke-Item $ReportFilePath
}





###############################################################################################################################################################################



function LogonReport {
  param (
    [string]$ComputerName = $script:globalComputerName
  )
  $outputBox.AppendText("`n`n`r Running Logon Report...`r`n`n`n" + [Environment]::NewLine)
  try {
    # Function to get logon type definition
    function Get-LogonTypeDefinition {
      param (
        [string]$logonType
      )

      switch ($logonType) {
        "2" { "Interactive (Logon at keyboard and screen of system or PS Remote)" }
        "3" { "Network (Logon to shared resources on the system)" }
        "4" { "Batch (Logon for batch servers)" }
        "5" { "Service (Logon for a service)" }
        "7" { "Unlock (Unlock workstation)" }
        "8" { "NetworkCleartext (Cleartext logon using NetLogon)" }
        "9" { "NewCredentials (RunAs using alternate credentials)" }
        "10" { "RemoteInteractive (Terminal Services, Remote Desktop, or Remote Assistance)" }
        "11" { "CachedInteractive (Cached interactive logon)" }
        default { "Unknown Logon Type" }
      }
    }

    # Set the path for the report folder on the local desktop
    $ReportFolderPath = "$env:USERPROFILE\Desktop\$ComputerName TREX REPORTS"

    # Create the report folder if it doesn't exist
    if (-not (Test-Path -Path $ReportFolderPath)) {
      New-Item -Path $ReportFolderPath -ItemType Directory -Force
    }

    # Output file path for the HTML report
    $OutputFilePath = [System.IO.Path]::Combine($ReportFolderPath, 'LogonReport.html')

    # Start creating the HTML file
    #Write-Host "Running Logon Report on $ComputerName..."

    # Function to write content to the HTML file
    function Write-HTMLContent {
      param (
        [string]$content
      )
      Add-Content -Path $OutputFilePath -Value $content
    }

    # Function to create HTML headers
    function Write-HTMLHeader {
      param (
        [string]$title
      )
      $header = @"
<!DOCTYPE html>
<html>
<head>
    <title>$title</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        h1 {
            color: #333;
        }
        h2 {
            color: #0066cc;
        }
        h3 {
            color: #009900;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        pre {
            background-color: #f9f9f9;
            padding: 10px;
            border: 1px solid #ddd;
            white-space: pre-wrap;
            font-family: Consolas, monospace;
        }
        .failed-login {
            color: #cc0000;
        }
        .today-run {
            background-color: #ffffcc !important;
        }
    </style>
</head>
<body>
    <h1>$title</h1>
"@
      Write-HTMLContent -content $header
    }

    # Function to create HTML footers
    function Write-HTMLFooter {
      $footer = @"
</body>
</html>
"@
      Write-HTMLContent -content $footer
    }

    # Display the current date and time
    Write-HTMLContent -content "<h2>Date and Time: $(Get-Date)</h2>"

    # Section 1: Show all logins with timestamps
    $loginEvents = Get-WinEvent -ComputerName $ComputerName -FilterHashtable @{
      LogName = 'Security'
      ID = 4624, 4625
    } -MaxEvents ([int]::MaxValue)

    Write-HTMLContent -content "<h2 style='color: #cc0000;'>$ComputerName Logins</h2>"
    Write-HTMLContent -content ("<p>Number of login events: " + $loginEvents.Count + "</p>")
    Write-HTMLContent -content "<table><tr><th>Time</th><th>User</th><th>Status</th><th>Status Definition</th><th>Description</th></tr>"
    foreach ($event in $loginEvents) {
      $time = $event.TimeCreated
      $user = $event.Properties[5].Value
      $status = $event.Properties[8].Value
      $logonType = $event.Properties[8].Value
      $statusDefinition = Get-LogonTypeDefinition $logonType
      $description = if ($event.Id -eq 4624) { "Successful Login" } else { "Failed Login" }
      $cssClass = if ($event.Id -eq 4625) { "failed-login" } else { "" }
      Write-HTMLContent -content ("<tr class='$cssClass'><td>$time</td><td>$user</td><td>$logonType</td><td>$statusDefinition</td><td>$description</td></tr>")
    }

    # Close the HTML tags
    Write-HTMLFooter


    $outputBox.AppendText("`n`n`r Report generated and saved to $OutputFilePath Logon Report... `r`n`n" + [Environment]::NewLine)
       

    # Return the output path for confirmation
    $OutputFilePath
  } catch {
    Write-Host "Error: $_"
  }
}





##############################################################################################################################################################################



function WEBHISTORY {

  Copy-BrowserHistory -Browser 'Chrome'
  Copy-BrowserHistory -Browser 'Brave'
  Copy-BrowserHistory -Browser 'Opera'
  Copy-BrowserHistory -Browser 'Firefox'
  Copy-BrowserHistory -Browser 'Edge'

  $destinationFolder = [System.IO.Path]::Combine($env:USERPROFILE, 'Desktop', "$script:globalComputerName TREX REPORTS", 'Browser Histories')

  param (
    [string]$destinationFolder
  )

  $Regex = '\b(?:https?|www|\w{2,}\.\w{2,}|\.com|\.org|\.gov)\S*\b'

  try {
    # Get all browser history files in the specified folder
    $historyFiles = Get-ChildItem -Path $destinationFolder -Include "ChromeHistory_*.db", "BraveHistory_*.db", "OperaHistory_*.db", "FirefoxHistory_*.sqlite", "EdgeHistory_*.db"

    # Loop through each history file
    foreach ($historyFile in $historyFiles) {
      $outputTxtFile = [System.IO.Path]::ChangeExtension($historyFile.FullName, 'txt')

      # For Firefox, read SQLite database directly
      if ($historyFile.Name -like "FirefoxHistory_*.sqlite") {
        $firefoxProfile = [System.IO.Path]::GetDirectoryName($historyFile.FullName)
        $firefoxHistoryFile = Get-ChildItem -Path $firefoxProfile -Filter "places.sqlite"
        Copy-Item -Path $firefoxHistoryFile.FullName -Destination $destinationFolder -Force
      }

      $outputBox.AppendText("`n`n`r Browser History Database File Found.... copied and parsed to local desktop `r`n`n" + [Environment]::NewLine)

      #Write-Host "Parsed Browser history from $historyFile to $outputTxtFile"
    }

    #Write-Host "Parsing completed for all Browser history files in $destinationFolder"

  } catch {
    #Write-Host "Error: $_"
  }
}

function Copy-BrowserHistory {

  param (
    [string]$Browser
  )

  $outputBox.AppendText("`n`n`r Copying $Browser History Database files to local Desktop.... `r`n`n" + [Environment]::NewLine)

  # Define the remote PC's hostname or IP address
  $remotePC = $script:globalComputerName

  # Define the destination path on the local desktop
  $destinationPath = [System.IO.Path]::Combine($env:USERPROFILE, 'Desktop', "$remotepc TREX REPORTS", 'Browser Histories')

  # Get a list of user profiles on the remote PC
  $userProfiles = Get-ChildItem "\\$remotePC\C$\Users" | Where-Object { $_.PSIsContainer }

  # Loop through each user profile and copy the browser history file
  foreach ($profile in $userProfiles) {
    $username = $profile.Name
    $browserHistoryFolder = switch ($Browser) {
      'Chrome' { "\\$remotePC\C$\Users\$username\AppData\Local\Google\Chrome\User Data\Default" }
      'Brave' { "\\$remotePC\C$\Users\$username\AppData\Local\BraveSoftware\Brave-Browser\User Data\Default" }
      'Opera' { "\\$remotePC\C$\Users\$username\AppData\Roaming\Opera Software\Opera Stable" }
      'Firefox' { "\\$remotePC\C$\Users\$username\AppData\Roaming\Mozilla\Firefox\Profiles" }
      'Edge' { "\\$remotePC\C$\Users\$username\AppData\Local\Microsoft\Edge\User Data\Default" }
    }

    # Search for the browser history file within the user's profile folder
    $historyFilePath = switch ($Browser) {
      'Chrome' { Get-ChildItem -Path $browserHistoryFolder -Filter "History" -Recurse | Select-Object -First 1 }
      'Brave' { Get-ChildItem -Path $browserHistoryFolder -Filter "History" -Recurse | Select-Object -First 1 }
      'Opera' { Get-ChildItem -Path $browserHistoryFolder -Filter "History" -Recurse | Select-Object -First 1 }
      'Firefox' { Get-ChildItem -Path $browserHistoryFolder -Filter "places.sqlite" -Recurse | Select-Object -First 1 }
      'Edge' { Get-ChildItem -Path $browserHistoryFolder -Filter "History" -Recurse | Select-Object -First 1 }
    }

    if ($historyFilePath) {
      # Create the destination folder if it doesn't exist
      if (-not (Test-Path $destinationPath -PathType Container)) {
        New-Item -ItemType Directory -Path $destinationPath | Out-Null
      }

      # Construct the destination filename with the username
      $destinationFileName = switch ($Browser) {
        'Chrome' { "ChromeHistory_$username.db" }
        'Brave' { "BraveHistory_$username.db" }
        'Opera' { "OperaHistory_$username.db" }
        'Firefox' { "FirefoxHistory_$username.sqlite" }
        'Edge' { "EdgeHistory_$username.db" }
      }
      $destinationFilePath = Join-Path $destinationPath -ChildPath $destinationFileName

      # Copy the browser history file to the destination folder with a unique filename
      Copy-Item -Path $historyFilePath.FullName -Destination $destinationFilePath -Force

      #Write-Host "$Browser history file copied for $username to $destinationFilePath"
    } else {
      #Write-Host "$Browser history file not found for $username"
    }
  }
}

function UserDownloads {
$outputBox.AppendText("`n`n`r Copying USER Downloads to local Desktop.... `r`n`n" + [Environment]::NewLine)

    param (
        [string]$destinationFolder = [System.IO.Path]::Combine($env:USERPROFILE, 'Desktop', "$script:globalComputerName TREX REPORTS", 'Downloads')
    )
    
    # Define the remote PC's hostname or IP address
    $remotePC = $script:globalComputerName
    
    # Get a list of user profiles on the remote PC
    $userProfiles = Get-ChildItem "\\$remotePC\C$\Users" | Where-Object { $_.PSIsContainer }
    
    foreach ($profile in $userProfiles) {
        $username = $profile.Name
        $downloadsFolder = "\\$remotePC\C$\Users\$username\Downloads"
        
        if (Test-Path $downloadsFolder) {
            $files = Get-ChildItem -Path $downloadsFolder | Select-Object Name, Length, LastWriteTime
            
            if ($files) {
                # Create the destination folder if it doesn't exist
                if (-not (Test-Path $destinationFolder -PathType Container)) {
                    New-Item -ItemType Directory -Path $destinationFolder | Out-Null
                }
                
                # Create HTML report
                $htmlFilePath = [System.IO.Path]::Combine($destinationFolder, "Download_History_$username.html")
                $htmlHeader = "<html><head><title>Downloads - $username</title></head><body>"
                $htmlHeader += "<h2>Downloads for $username</h2><h3>Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</h3><table border='1'><tr><th>File Name</th><th>Size (KB)</th><th>Last Modified</th></tr>"
                
                $htmlBody = ""
                foreach ($file in $files) {
                    $sizeKB = [math]::Round($file.Length / 1KB, 2)
                    $htmlBody += "<tr><td>$($file.Name)</td><td>$sizeKB</td><td>$($file.LastWriteTime)</td></tr>"
                }
                
                $htmlFooter = "</table></body></html>"
                
                # Save the HTML report
                ($htmlHeader + $htmlBody + $htmlFooter) | Out-File -FilePath $htmlFilePath -Encoding UTF8
            }
        }
    }
    $outputBox.AppendText("`n`n`r USER Download Report Completed........ `r`n`n" + [Environment]::NewLine)

}




##########################################################################################################################################







###############################################################################################################################################################################
###############################################################################################################################################################################







###############################################################################################################################################################################
###############################################################################################################################################################################




###############################################################################################################################################################################

function ANTIVIRUS {

  $outputBox.AppendText("`n`n`r Running Antivirus Status Report... `r`n`n" + [Environment]::NewLine)


  param (
    [string]$ComputerName = $script:globalComputerName
  )

  try {
    # Set the path for the report folder on the desktop
    $ReportFolderPath = [System.IO.Path]::Combine($env:USERPROFILE, 'Desktop', "$ComputerName TREX REPORTS")

    # Create the report folder if it doesn't exist
    if (-not (Test-Path -Path $ReportFolderPath)) {
      New-Item -Path $ReportFolderPath -ItemType Directory -Force
    }

    # Output file path for the HTML report
    $OutputFilePath = [System.IO.Path]::Combine($ReportFolderPath, 'AntivirusReport.html')

    # Function to write content to the HTML file
    function Write-HTMLContent {
      param (
        [string]$content
      )
      Add-Content -Path $OutputFilePath -Value $content
    }

    # Function to create HTML headers
    function Write-HTMLHeader {
      param (
        [string]$title
      )
      $header = @"
<!DOCTYPE html>
<html>
<head>
    <title>$title</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        h1 {
            color: #333;
        }
        h2 {
            color: #0066cc;
        }
        h3 {
            color: #009900;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        pre {
            background-color: #f9f9f9;
            padding: 10px;
            border: 1px solid #ddd;
            white-space: pre-wrap;
            font-family: Consolas, monospace;
        }
        .exclusion {
            color: #990099;
        }
        .active {
            color: #009900;
        }
        .inactive {
            color: #FF0000;
        }
    </style>
</head>
<body>
    <h1>$title</h1>
"@
      Write-HTMLContent -content $header
    }

    # Function to create HTML footers
    function Write-HTMLFooter {
      $footer = @"
</body>
</html>
"@
      Write-HTMLContent -content $footer
    }

    # Function to get Microsoft Defender status and exclusions
    function Get-MicrosoftDefenderStatus {
      $defenderStatus = Get-MpComputerStatus
      $defenderRealTimeProtection = Get-MpPreference | Select-Object -ExpandProperty RealTimeProtectionEnabled

      $antivirusStatus = if ($defenderRealTimeProtection) { 'Active' } else { 'Inactive' }
      $antivirusExclusions = "Microsoft Defender Exclusions:"
            
      # Retrieve Microsoft Defender exclusions
      $exclusions = Get-MpPreference | Select-Object -ExpandProperty ExclusionPath
      $exclusionContent = if ($exclusions) {
        $exclusions -join "`r`n"
      } else {
        "No exclusions configured."
      }

      Write-HTMLContent -content ("<h3>Microsoft Defender Status: $antivirusStatus</h3>")
      Write-HTMLContent -content ("<p>$antivirusExclusions</p>")
      Write-HTMLContent -content ("<pre class='exclusion'>$exclusionContent</pre>")
    }

    # Function to get Sophos status
    function Get-SophosStatus {
      # Attempt to retrieve Sophos status from the registry
      $sophosStatus = "Sophos Status: Not Implemented (Check Registry)"
      $sophosRegistryKey = "HKLM:\SOFTWARE\Sophos"

      if (Test-Path $sophosRegistryKey) {
        $sophosStatus = "Sophos Status: Installed"
      } else {
        $sophosStatus = "Sophos Status: Not Installed"
      }

      Write-HTMLContent -content ("<h3>$sophosStatus</h3>")
    }

    # Function to get antivirus products installed on the system
    function Get-InstalledAntivirusProducts {
      $antivirusProducts = Get-WmiObject -Namespace "root\SecurityCenter2" -Query "SELECT * FROM AntiVirusProduct"

      foreach ($product in $antivirusProducts) {
        $productName = $product.displayName
        Write-HTMLContent -content "<h2>$productName</h2>"

        $status = $product.productState
        $statusClass = if ($status -eq 397568) { 'active' } else { 'inactive' }

        $statusText = if ($status -eq 397568) { 'Active' } else { 'Inactive' }
        Write-HTMLContent -content "<p class='$statusClass'>Status: $statusText</p>"

        # Add logic here to retrieve antivirus exclusions for each product
        # Example: $antivirusExclusions = Get-AntivirusExclusionsFunction

        Write-HTMLContent -content "<h3>Antivirus Exclusions:</h3>"
        Write-HTMLContent -content "<p>$antivirusExclusions</p>"
      }
    }

    # Start creating the HTML file
    Write-HTMLHeader -title "Antivirus Report - $ComputerName"

    # Display the current date and time
    Write-HTMLContent -content "<h2>Date and Time: $(Get-Date)</h2>"

    # Section 1: Microsoft Defender status and exclusions
    Get-MicrosoftDefenderStatus

    # Section 2: Sophos status
    Get-SophosStatus

    # Section 3: Antivirus products and their status
    Get-InstalledAntivirusProducts

    # Close the HTML tags
    Write-HTMLFooter

    $outputBox.AppendText("`n`n`r Antivirus report generated successfully: $OutputFilePath `r`n`n" + [Environment]::NewLine)

    #Write-Host "Antivirus report generated successfully."

    # Return the output path for confirmation
    $OutputFilePath
  } catch {
    #Write-Host "Error: $_"
  }
}










###############################################################################################################################################################################
###############################################################################################################################################################################
###############################################################################################################################################################################


function WIFINETWORK {
  param (
    [string]$ComputerName = $script:globalComputerName
  )

  $outputBox.AppendText("`n`n`r Running WIFI and Network Report... `r`n`n" + [Environment]::NewLine)

  # Create a folder on the desktop
  $FolderPath = [System.IO.Path]::Combine($env:USERPROFILE, 'Desktop', "$ComputerName TREX REPORTS")
  if (-not (Test-Path -Path $FolderPath)) {
    New-Item -ItemType Directory -Path $FolderPath | Out-Null
  }

  # Get the current date and time
  $currentDateTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

  # Create an HTML report
  $htmlReport = @"
<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            padding: 20px;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }
        th {
            background-color: #f2f2f2;
        }
        .hidden-password {
            display: none;
        }
        .password-button {
            padding: 10px;
            font-size: 16px;
            margin-bottom: 20px;
        }
    </style>
    <script>
        function togglePasswordVisibility() {
            var passwords = document.querySelectorAll('.password-cell');
            passwords.forEach(function (passwordCell) {
                passwordCell.classList.toggle('hidden-password');
            });
        }
    </script>
</head>
<body>
    <h2>WIFI and Network Adapter Report - $ComputerName - $currentDateTime</h2>
    <button class='password-button' onclick='togglePasswordVisibility()'>Show/Hide Passwords</button>
    <table>
        <tr>
            <th>SSID</th>
            <th>Password</th>
        </tr>
"@

  $wifiProfiles = Invoke-Command -ComputerName $ComputerName -ScriptBlock {
    netsh wlan show profiles | ForEach-Object {
      if ($_ -match "All User Profile\s*:\s*(.+)") {
        $matches[1].Trim()
      }
    }
  }

  foreach ($ssid in $wifiProfiles) {
    $output = Invoke-Command -ComputerName $ComputerName -ScriptBlock {
      netsh wlan show profile name="$using:ssid" key=clear
    }

    $keyContentLine = $output | Select-String "Key Content"
    if ($keyContentLine -match "Key Content\s*:\s*(.+)") {
      $password = $matches[1].Trim()

      # Append to the HTML report
      $htmlReport += "        <tr><td>$ssid</td><td class='password-cell hidden-password'>$password</td></tr>`n"
    } else {
      # Append to the HTML report with 'Not found'
      $htmlReport += "        <tr><td>$ssid</td><td>Not found</td></tr>`n"
    }
  }

  $htmlReport += @"
    </table>
    <h3>Network Adapters</h3>
    <table>
        <tr>
            <th>Adapter Name</th>
            <th>MAC Address</th>
            <th>IPv4 Addresses</th>
            <th>IPv6 Addresses</th>
        </tr>
"@

  $networkAdapters = Invoke-Command -ComputerName $ComputerName -ScriptBlock {
    Get-NetAdapter | Where-Object { $_.Status -eq 'Up' }
  }

  foreach ($adapter in $networkAdapters) {
    $adapterName = $adapter.Name
    $macAddress = $adapter.MacAddress
    $ipv4Addresses = Invoke-Command -ComputerName $ComputerName -ScriptBlock {
      (Get-NetIPAddress -InterfaceAlias $using:adapterName -AddressFamily IPv4).IPAddress
    }
    $ipv6Addresses = Invoke-Command -ComputerName $ComputerName -ScriptBlock {
      (Get-NetIPAddress -InterfaceAlias $using:adapterName -AddressFamily IPv6).IPAddress
    }

    # Append to the HTML report
    $htmlReport += "        <tr><td>$adapterName</td><td>$macAddress</td><td>$ipv4Addresses</td><td>$ipv6Addresses</td></tr>`n"
  }

  $htmlReport += @"
    </table>
</body>
</html>
"@

  # Save the HTML report to the folder on the local desktop
  $reportPath = [System.IO.Path]::Combine($FolderPath, "NetworkAdapterReport.html")
  $htmlReport | Out-File -FilePath $reportPath -Encoding UTF8

  # Display a message with the report path
  $outputBox.AppendText("`n`n`r Report saved to: $reportPath`n`n" + [Environment]::NewLine)

  # Open the report
  # Invoke-Item $reportPath
}









###############################################################################################################################################################################
###############################################################################################################################################################################
###############################################################################################################################################################################

function CheckMaliciousScripts { 
    $outputBox.AppendText("`n`n`r Running Malicious Script Check....`n`n`n`n" + [Environment]::NewLine)

    $item = "$script:globalComputerName"
    $timestamp = Get-Date -Format "yyyy-MM-dd HH-mm-ss"

    try {
        If (Test-Connection -Count 1 -ComputerName $item -Quiet) {
            $outputBox.AppendText("$item ONLINE" + [Environment]::NewLine)

            # Define report folder
            $ReportFolder = [System.IO.Path]::Combine($env:USERPROFILE, 'Desktop', "$script:globalComputerName TREX REPORTS")

            # Ensure folder exists
            if (-not (Test-Path -Path $ReportFolder -PathType Container)) {
                New-Item -Path $ReportFolder -ItemType Directory | Out-Null
            }

            # Define report file path
            $ReportFile = "$ReportFolder\MaliciousScriptsReport_$timestamp.html"

            $outputBox.AppendText("Scanning for suspicious PowerShell processes on $item..." + [Environment]::NewLine)

            # Execute remote command to detect suspicious PowerShell activity
            $scriptCheckResults = Invoke-Command -ComputerName $item -ScriptBlock {
                Get-WmiObject Win32_Process | Where-Object { $_.CommandLine -match "http|https|base64" } | 
                Select-Object ProcessId, Name, CommandLine
            }

            # Generate HTML report header
            $htmlContent = @"
<!DOCTYPE html>
<html>
<head>
    <title>Malicious Script Report - $item</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: red; }
        h2 { color: black; }
        table { width: 100%; border-collapse: collapse; margin-top: 10px; }
        th, td { border: 1px solid black; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <h1>Potentially Malicious Running Scripts Report</h1>
    <h2>Computer: $item</h2>
    <h2>Date & Time: $timestamp</h2>
    <p>This report identifies potentially malicious PowerShell scripts running on the system.</p>
    <p>It checks for scripts containing suspicious keywords like 'http', 'https', and 'base64', which are often used in attacks.</p>
"@

            # Check if results exist
            if ($scriptCheckResults) {
                $htmlContent += "<table><tr><th>Process ID</th><th>Name</th><th>Command Line</th></tr>"

                foreach ($process in $scriptCheckResults) {
                    $htmlContent += "<tr>
                        <td>$($process.ProcessId)</td>
                        <td>$($process.Name)</td>
                        <td>$($process.CommandLine)</td>
                    </tr>"
                }

                $htmlContent += "</table>"
                $outputBox.AppendText("Suspicious activity detected! Report saved to: $ReportFile" + [Environment]::NewLine)
            } else {
                $htmlContent += "<p style='color: green; font-weight: bold;'>No suspicious PowerShell activity detected.</p>"
                $outputBox.AppendText("No suspicious activity found on $item." + [Environment]::NewLine)
            }

            # Close HTML document
            $htmlContent += "</body></html>"

            # Save report
            $htmlContent | Out-File -FilePath $ReportFile -Encoding UTF8
            $outputBox.AppendText("Report saved to: $ReportFile" + [Environment]::NewLine)

        } else {
            $outputBox.AppendText("$item offline" + [Environment]::NewLine)
        }

    } catch {
        $outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
    }

    $outputBox.AppendText("`n`n`r Malicious Script Check completed. `n`n`r" + [Environment]::NewLine)
    Start-Sleep -Seconds 1
    $statusText.text = ""
}














###############################################################################################################################################################################
###############################################################################################################################################################################




function SCHEDULEDTASKS {



  param (
    [string]$remoteComputer = $script:globalComputerName,
    [string]$outputPath = "$env:USERPROFILE\Desktop\$script:globalComputerName TREX REPORTS\ScheduledTasks.html"
  )

  # Check if the directory exists, if not, create it
  $outputDirectory = Split-Path -Path $outputPath
  if (-not (Test-Path $outputDirectory -PathType Container)) {
    New-Item -Path $outputDirectory -ItemType Directory -Force
  }
  $outputBox.AppendText("`n`n`r Generating Scheduled Task Report.... `n`n`r" + [Environment]::NewLine)
  $tasks = Get-ScheduledTask -CimSession $remoteComputer

  $htmlContent = @"
<!DOCTYPE html>
<html>
<head>
    <title>Scheduled Tasks on $remoteComputer - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</title>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h2>Scheduled Tasks on $remoteComputer - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</h2>
    <table>
        <tr>
            <th>Task Name</th>
            <th>Next Run Time</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
"@

  foreach ($task in $tasks) {
    $status = if ($task.State -eq 'Running') { 'Running' } else { 'Not Running' }

    $nextRunTime = if ($task.NextRunTime) {
      $task.NextRunTime.ToString('yyyy-MM-dd HH:mm:ss')
    } else {
      'N/A'
    }

    $actions = $task.Actions | ForEach-Object {
      $_.ActionType + ": " + $_.Arguments
    }

    $htmlContent += @"
        <tr>
            <td>$($task.TaskName)</td>
            <td>$nextRunTime</td>
            <td>$status</td>
            <td>$($actions -join '<br>')</td>
        </tr>
"@
  }

  $htmlContent += @"
    </table>
</body>
</html>
"@

  $htmlContent | Out-File -FilePath $outputPath -Encoding UTF8
  #Write-Host "Scheduled tasks information saved to: $outputPath"

  $outputBox.AppendText("`n`n`r Scheduled Task Report saved to: $outputPath. `n`n`r" + [Environment]::NewLine)
}











###############################################################################################################################################################################


function STARTUP {
  param (
    [string]$remoteComputerName = $script:globalComputerName
  )

  # Define local output folder and path
  $outputFolder = "$env:USERPROFILE\Desktop\$remoteComputerName TREX REPORTS"
  $outputPath = Join-Path $outputFolder "StartupItems.html"

  $outputBox.AppendText("`n`n`r Running Startup Report.... `n`n`r" + [Environment]::NewLine)

  # Create the output folder if it doesn't exist
  if (-not (Test-Path -Path $outputFolder -PathType Container)) {
    New-Item -Path $outputFolder -ItemType Directory | Out-Null
  }

  # Get current date and time
  $dateTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

  # Get startup items from remote machine
  $startupItems = Invoke-Command -ComputerName $remoteComputerName -ScriptBlock {
    Get-CimInstance -Query "SELECT * FROM Win32_StartupCommand" | Select-Object Caption, Command, Location
  }

  # Create HTML content
  $htmlContent = @"
    <html>
    <head>
        <title>Startup Items</title>
        <style>
            body {
                font-family: 'Arial', sans-serif;
            }
            table {
                border-collapse: collapse;
                width: 100%;
            }
            th, td {
                border: 1px solid #dddddd;
                text-align: left;
                padding: 8px;
            }
            th {
                background-color: #f2f2f2;
            }
        </style>
    </head>
    <body>
        <h2>Startup Items on $remoteComputerName</h2>
        <p>Report generated on: $dateTime</p>
        <table>
            <tr>
                <th>Caption</th>
                <th>Command</th>
                <th>Location</th>
            </tr>
"@

  # Add rows to HTML content
  foreach ($item in $startupItems) {
    $htmlContent += @"
            <tr>
                <td>$($item.Caption)</td>
                <td>$($item.Command)</td>
                <td>$($item.Location)</td>
            </tr>
"@
  }

  # Close HTML content
  $htmlContent += @"
        </table>
    </body>
    </html>
"@

  # Save HTML content to the local output path
  $htmlContent | Out-File -FilePath $outputPath -Force

  $outputBox.AppendText("`n`n`r Startup Report saved to: $outputPath. `n`n`r" + [Environment]::NewLine)
}







###############################################################################################################################################################################

function SHUTDOWNPC {
  

  $outputBox.AppendText("Shutdown Tool Started." + [Environment]::NewLine)

  $item = $script:globalComputerName

  $confirmationResult = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to Shutdown the pc?", "Confirm", "YesNo", "Question")

  switch ($confirmationResult) {
    'Yes' {
      $outputBox.AppendText("User confirmed.  Starting Shutdown process." + [Environment]::NewLine)

      try {
        If (Test-Connection -Count 1 -ComputerName $item -Quiet) {
          $outputBox.AppendText("$item Connected and is ONLINE.  Starting Shutdown, please wait... " + [Environment]::NewLine)

                    
          Stop-Computer -ComputerName $item -Force
                   

          # Wait for a bit
          Start-Sleep -Seconds 5  # Adjust the delay as needed

          # Check if the computer is still reachable
          $timeout = 60  # Adjust the timeout as needed
          $start = Get-Date
          while ((Test-Connection -ComputerName $item -Count 1 -Quiet) -and ((Get-Date) -lt ($start.AddSeconds($timeout)))) {
            Start-Sleep -Seconds 5
          }

          if (Test-Connection -ComputerName $item -Count 1 -Quiet) {
            $outputBox.AppendText("$item is still reachable. Shutdown may not have completed successfully." + [Environment]::NewLine)
          } else {
            $outputBox.AppendText("$item is not reachable. Shutdown appears to be successful." + [Environment]::NewLine)
          }
        } else {
          $outputBox.AppendText("$item OFFLINE" + [Environment]::NewLine)
        }
      } catch {
        #$outputBox.AppendText("$item | $_.Exception.Message" + [Environment]::NewLine)
      }

      $outputBox.AppendText("Shutdown Operation Complete" + [Environment]::NewLine)
    }
    'No' {
      $outputBox.AppendText("User aborted the operation. (Confirmation declined)" + [Environment]::NewLine)
    }
  }
}



###############################################################################################################################################################################

###############################################################################################################################################################################



function USBDEVICE {
    param (
        [string]$remoteComputerName = $global:globalComputerName,
        [string]$localFolderPath = "$env:USERPROFILE\Desktop"
    )

    $outputBox.AppendText("`n`n`r Getting USB Drive Report from $remoteComputerName....`r`n`n" + [Environment]::NewLine)

    # Folder configuration
    $folderName = "$remoteComputerName TREX REPORTS"
    $localFolderFullPath = Join-Path $localFolderPath $folderName
    $regSubfolder = Join-Path $localFolderFullPath "RegistryExports"

    # Create output directories
    if (-not (Test-Path -Path $localFolderFullPath -PathType Container)) {
        New-Item -Path $localFolderFullPath -ItemType Directory | Out-Null
    }
    if (-not (Test-Path -Path $regSubfolder -PathType Container)) {
        New-Item -Path $regSubfolder -ItemType Directory | Out-Null
    }

    try {
        # Get currently connected USB devices with detailed information
        $currentDevices = Invoke-Command -ComputerName $remoteComputerName -ScriptBlock {
            $pnpDevices = Get-PnpDevice -PresentOnly | Where-Object { $_.InstanceId -match '^USB' } | 
                Select-Object Status, Class, FriendlyName, Description, Manufacturer, InstanceId

            $wmiDevices = Get-WmiObject Win32_PnPEntity | Where-Object { $_.PNPClass -eq "USB" } | 
                Select-Object Name, Description, Manufacturer, PNPClass, Status

            # Combine and deduplicate the results
            $combinedDevices = @()
            foreach ($device in $pnpDevices) {
                $wmiDevice = $wmiDevices | Where-Object { $_.Name -eq $device.FriendlyName }
                if ($wmiDevice) {
                    $combinedDevices += [PSCustomObject]@{
                        FriendlyName = $device.FriendlyName
                        Description = $wmiDevice.Description
                        Manufacturer = $wmiDevice.Manufacturer
                        Class = $device.Class
                        Status = $device.Status
                        InstanceId = $device.InstanceId
                    }
                } else {
                    $combinedDevices += $device
                }
            }
            $combinedDevices
        }

        # Get historical USB devices from registry
        $historicalDevices = Invoke-Command -ComputerName $remoteComputerName -ScriptBlock {
            Get-ChildItem -Path "HKLM:\SYSTEM\CurrentControlSet\Enum\USB" -Recurse |
            Get-ItemProperty |
            Where-Object { $_.FriendlyName } |
            Select-Object FriendlyName, @{Name="InstanceId"; Expression={$_.PSParentPath -replace ".*\\USB\\",""}}
        }

        # Generate HTML report
        $currentDateTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $htmlContent = @"
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        h2 { color: #2c3e50; margin-top: 30px; }
        .note { color: #666; font-size: 0.9em; }
    </style>
</head>
<body>
    <h1>TREX - USB Device Report</h1>
    <p><strong>Computer Name:</strong> $remoteComputerName</p>
    <p><strong>Report Generated:</strong> $currentDateTime</p>

    <h2>Currently Connected USB Devices</h2>
    $(if ($currentDevices) {
        @"
        <table>
            <tr>
                <th>Friendly Name</th>
                <th>Description</th>
                <th>Manufacturer</th>
                <th>Class</th>
                <th>Status</th>
                <th>Instance ID</th>
            </tr>
            $(foreach ($device in $currentDevices) {
                "<tr>
                    <td>$($device.FriendlyName)</td>
                    <td>$($device.Description)</td>
                    <td>$($device.Manufacturer)</td>
                    <td>$($device.Class)</td>
                    <td>$($device.Status)</td>
                    <td>$($device.InstanceId)</td>
                </tr>"
            })
        </table>
"@
    } else {
        "<p class='note'>No currently connected USB devices found.</p>"
    })

    <h2>Previously Connected USB Devices</h2>
    $(if ($historicalDevices) {
        @"
        <table>
            <tr><th>Friendly Name</th><th>Instance ID</th></tr>
            $(foreach ($device in $historicalDevices) {
                "<tr><td>$($device.FriendlyName)</td><td>$($device.InstanceId)</td></tr>"
            })
        </table>
"@
    } else {
        "<p class='note'>No historical USB devices found.</p>"
    })
</body>
</html>
"@


# Copy the SetupAPI log from the remote machine
    $remoteLogPath = "\\$remoteComputerName\C$\Windows\INF\setupapi.dev.log"
    $localLogPath = Join-Path $regSubfolder "setupapi.dev.log"
    Copy-Item -Path $remoteLogPath -Destination $localLogPath -Force

    Start-Sleep -Seconds 5  # Wait to ensure the file is copied



        # Save report
        $reportFilePath = Join-Path $localFolderFullPath "USB Devices.html"
        $htmlContent | Out-File -FilePath $reportFilePath -Encoding UTF8
        $outputBox.AppendText("`nHTML report generated at: $reportFilePath`n")

    }
    catch {
        $outputBox.AppendText("`nError processing USB data: $_`n")
    }
}










###############################################################################################################################################################################


function RUNNINGPROCESS {

  param (
    [string]$remoteComputer = $global:globalComputerName
  )
  $outputBox.AppendText("`n`n`r Starting Running Process Report....`n`n`r" + [Environment]::NewLine)


  # Create folder name with the remote machine name
  $folderName = "$remoteComputer TREX REPORTS"
  $desktopPath = [System.IO.Path]::Combine($env:USERPROFILE, 'Desktop')
  $folderPath = Join-Path -Path $desktopPath -ChildPath $folderName

  # Create folder if it doesn't exist
  if (-not (Test-Path $folderPath -PathType Container)) {
    New-Item -ItemType Directory -Path $folderPath -Force | Out-Null
  }

  # Create HTML file with computer name, date, and time in the header
  $htmlFilePath = Join-Path -Path $folderPath -ChildPath "RunningProcessesAndServices.html"
  $currentDateTime = Get-Date
  $header = @"
<html>
<head>
    <title>TREX REPORT</title>
</head>
<body>
    <h1>Computer: $remoteComputer</h1>
    <h2>Date and Time: $($currentDateTime.ToString())</h2>
    <hr/>
"@

  # Get running processes and services
  $processes = Invoke-Command -ComputerName $remoteComputer -ScriptBlock { Get-Process | Select-Object Name, Id }
  $services = Invoke-Command -ComputerName $remoteComputer -ScriptBlock { Get-Service | Select-Object DisplayName, Status }

  $processesTable = $processes | ForEach-Object { "<tr><td>$($_.Name)</td><td>$($_.Id)</td></tr>" }
  $servicesTable = $services | ForEach-Object { "<tr><td>$($_.DisplayName)</td><td>$($_.Status)</td></tr>" }

  $processesSection = @"
    <h2>Running Processes</h2>
    <table border='1'>
        <tr><th>Name</th><th>Id</th></tr>
        $processesTable
    </table>

    <h2>Services and Their Status</h2>
    <table border='1'>
        <tr><th>DisplayName</th><th>Status</th></tr>
        $servicesTable
    </table>
"@

  # Closing HTML tags
  $footer = @"
</body>
</html>
"@

  # Combine and write to HTML file
  $htmlContent = $header + $processesSection + $footer
  $htmlContent | Out-File -FilePath $htmlFilePath -Encoding UTF8 -Force

  $outputBox.AppendText("`n`n`rHTML file created successfully on local machine at: $htmlFilePath`n`n`r" + [Environment]::NewLine)

  
}







###############################################################################################################################################################################

function MAINPING {
  param (
        
    [string]$computerName = $global:globalComputerName
  )
  $outputBox.AppendText("`n`n`r Checking to see if system is still reachable....`n`n`r" + [Environment]::NewLine)
  try {
    $pingResult = Test-Connection -ComputerName $computerName -Count 3 -ErrorAction Stop

    if ($pingResult.ResponseTime -eq $null) {
      $script:outputBox.AppendText("`n`n`r$computerName is unreachable`n`n`r" + [Environment]::NewLine)
    } else {
      $script:outputBox.AppendText("$computerName is reachable. Response time: $($pingResult.ResponseTime) ms" + [Environment]::NewLine)
    }
  } catch {
    $script:outputBox.AppendText("Error: $($_.Exception.Message)" + [Environment]::NewLine)
  }
}




###############################################################################################################################################################################


function DISABLENETWORK {


  Add-Type -AssemblyName System.Windows.Forms



  # Define the form
  $form = New-Object System.Windows.Forms.Form
  $form.Text = 'DISABLE COMPUTER'
  $form.Size = New-Object System.Drawing.Size(520, 440)
  $form.ForeColor = 'red'
  $form.BackColor = 'black'
  $form.StartPosition = 'CenterScreen'

  # Define the input box
  $inputBox = New-Object System.Windows.Forms.TextBox
  $inputBox.Location = New-Object System.Drawing.Point(10, 10)
  $inputBox.Size = New-Object System.Drawing.Size(200, 40)
  $inputBox.Text = "$script:globalComputerName"  
  $form.Controls.Add($inputBox)

  # Define the button
  $button = New-Object System.Windows.Forms.Button
  $button.Location = New-Object System.Drawing.Point(220, 5)
  $button.Size = New-Object System.Drawing.Size(240, 30)
  $button.Text = 'Disable Network Adapters'
  $button.ForeColor = 'black'
  $button.BackColor = 'red'
  $form.Controls.Add($button)

  # Define the output box
  $outputBox = New-Object System.Windows.Forms.TextBox
  $outputBox.Location = New-Object System.Drawing.Point(10, 40)
  $outputBox.Size = New-Object System.Drawing.Size(370, 220)
  $outputBox.Multiline = $true
  $outputBox.ScrollBars = 'Vertical'
  $outputBox.ReadOnly = $true
  $form.Controls.Add($outputBox)

  # Define the warning label
  $warningLabel = New-Object System.Windows.Forms.Label
  $warningLabel.Location = New-Object System.Drawing.Point(10, 265)
  $warningLabel.Size = New-Object System.Drawing.Size(400, 200)
  $warningLabel.Text = "WARNING:`r This will disable the computer`nfrom the internet and you will not be able to connect to it. `n`n**You will need to go to the computer.  Go to device manager, and re-enable the network adapters to get it back online.**"
  $warningLabel.ForeColor = [Drawing.Color]::Red
  $form.Controls.Add($warningLabel)

   # Define the ping button
  $pingButton = New-Object System.Windows.Forms.Button
  $pingButton.Location = New-Object System.Drawing.Point(390, 150)
  $pingButton.Size = New-Object System.Drawing.Size(100, 30)
  $pingButton.Text = 'Ping Computer'
  $pingButton.ForeColor = 'black'
  $pingButton.BackColor = 'orange'
  $form.Controls.Add($pingButton)



  #Startup Text for Output Box
  $outputBox.AppendText("`n`n`r THIS WILL DISABLE THE NETWORK ADAPTERS ON A REMOTE MACHINE.  `r`n`r`n AS A RESULT, IT WILL MOST LIKELY CRASH DUE TO THE ABRUPT CONNECTION LOSS.  `r`n`r`n YOU WILL HAVE TO FORCE CLOSE THE APPLICATION UPON EXIT....`n`n`r" + [Environment]::NewLine)


  # Define the ping button action
  $pingButton.Add_Click({
      $computerName = $inputBox.Text

      # Ping the remote machine
      $pingResult = Test-Connection -ComputerName $computerName -Count 1

      if ($pingResult) {
        $outputBox.AppendText("$computerName is reachable.`r`n")
      }
      else {
        $outputBox.AppendText("$computerName is not reachable.`r`n")
      }
  })



  # Define the button action
  $button.Add_Click({
      $computerName = $inputBox.Text

      # Prompt the user for a username and password
      $credential = Get-Credential

      #Disable all network adapters
      $output = Invoke-Command -ComputerName $computerName -Credential $credential -ScriptBlock {
        Get-NetAdapter | Disable-NetAdapter
      }


      #Wait for 10 seconds for network adapters to disable
      Start-Sleep -Seconds 10

      # Terminate the PowerShell session to the remote computer
      Remove-PSSession $output.PSSession

      #Wait for 10 seconds for network adapters to disable
      Start-Sleep -Seconds 10

    
      #Ping the remote machine to verify that network adapters are disabled
      $pingResult = Test-Connection -ComputerName $computerName -Count 1

      if ($pingResult) {
        $outputBox.AppendText("Network adapters on $computerName are still enabled.`r`n")
      }
      else {
        $outputBox.AppendText("Network adapters on $computerName have been successfully disabled.`r`n")
      }
  })

  # Show the form
  $null = $form.ShowDialog()
}



###############################################################################################################################################################################
function REMOTEC {

  $outputBox.AppendText("`r`n`n`r Accessing C: on  $script:globalComputerName .... `r`n`r`n" + [Environment]::NewLine)

# Get the domain name of the local machine
$domain = (Get-WmiObject -Class Win32_ComputerSystem).Domain

# Construct the UNC path for the remote machine
$remotePath = "\\$script:globalComputerName.$domain\c$"

# Check if the remote path is accessible
if (Test-Path $remotePath) {
    # If accessible, open the remote C$ share
    Invoke-Item -Path $remotePath
} else {
    Write-Host "Unable to access $remotePath"
}



}


###############################################################################################################################################################################

function INSTALLEDSOFTWARE {
  param (
    [string]$ComputerName = "$script:globalComputerName",
    [string]$ReportFileName = "InstalledSoftwareReport.html"
  )
  $outputBox.AppendText("`r`n`n`r Running Installed Software Report.... `r`n`r`n" + [Environment]::NewLine)
  try {
    # Get installed software from remote PC
    $installedSoftware = Invoke-Command -ComputerName $ComputerName -ScriptBlock {
      Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*,
      HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* |
      Select-Object DisplayName, DisplayVersion, Publisher, @{
        Name = 'InstallDate'
        Expression = {
          if ($_.InstallDate -match '^\d+$') {
            [DateTime]::ParseExact($_.InstallDate, 'yyyyMMdd', $null)
          } else {
            $_.InstallDate
          }
        }
      }
    } -ErrorAction Stop

    # Create a report with date and time in HTML format
    $htmlReport = $installedSoftware | ConvertTo-Html -As Table -Fragment

    $reportContent = @"
<html>
<head>
  <title>Installed Software Report for $ComputerName -  $(Get-Date) </title>
</head>
<body>
  <h2>Installed Software Report for $ComputerName (May contain only a partial list due to the restrictions of .exe applications.) - $(Get-Date)</h2>
  $htmlReport
</body>
</html>
"@

    # Save the report to the local PC's desktop in the "TREX REPORTS" subdirectory
    $reportPath = Join-Path ([System.Environment]::GetFolderPath('Desktop')) "$script:globalComputerName TREX REPORTS\$ReportFileName"

    # Create the folder if it doesn't exist
    $null = New-Item -ItemType Directory -Force -Path (Split-Path $reportPath)

    # Save the report as an HTML file
    $reportContent | Out-File -FilePath $reportPath -Force

    Write-Host "HTML report generated successfully. Path: $reportPath"
  } catch {
    Write-Host "Error: $_"
  }

  $outputBox.AppendText("`r`n`n`r Software report generated and saved to $reportPath `r`n`r`n" + [Environment]::NewLine)
}


##############################################################################################################################################################################
function EVENTVIEWER {
  
  
  $outputBox.AppendText("`r`n`n`r Preparing to copy event Viewer Files... `r`n`r`n" + [Environment]::NewLine)

  # Define variables
  $remoteServer = "$script:globalComputerName"
  $destinationFolder = Join-Path ([System.Environment]::GetFolderPath('Desktop')) "$script:globalComputerName TREX REPORTS\EventViewerReports\$ReportFileName"

  # Create destination folder if it doesn't exist
  if (-not (Test-Path -Path $destinationFolder)) {
    New-Item -ItemType Directory -Path $destinationFolder | Out-Null
  }

  # Copy event viewer files
  Copy-Item -Path "\\$remoteServer\c$\Windows\System32\Winevt\Logs\*" -Destination $destinationFolder -Force

  $outputBox.AppendText("`r`n`n`r Event Viewer Files copied and saved to $destinationFolder `r`n`r`n" + [Environment]::NewLine)
}



############################################################################################################################

 function Browserext {
    param (
        [string]$BaseOutputPath = "$env:USERPROFILE\Desktop"
    )

    # Output message to UI or console
    $outputBox.AppendText("`r`n`nRunning Browser Extension identifier tool...`r`n`r`n" + [Environment]::NewLine)

    # Variables
    $ComputerName = $script:globalComputerName
    $OutputFolderPath = Join-Path -Path $BaseOutputPath -ChildPath "$ComputerName TREX REPORTS"
    $ReportFilePath = Join-Path -Path $OutputFolderPath -ChildPath "ChromeExtensionsReport.html"
    $CurrentDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $ReportTitle = "Extension Report"
    $allExtensions = @()

    # Ensure output directory exists
    if (!(Test-Path -Path $OutputFolderPath)) {
        New-Item -ItemType Directory -Path $OutputFolderPath -Force | Out-Null
    }

    # Get user profiles from the remote machine
    try {
        $profileKeys = Invoke-Command -ComputerName $ComputerName -ScriptBlock {
            Get-ChildItem -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList" |
            ForEach-Object {
                $profilePath = (Get-ItemProperty -Path $_.PSPath).ProfileImagePath
                if ($profilePath -like "*\Users\*") { $profilePath }
            }
        }
    } catch {
        $outputBox.AppendText("Error retrieving user profiles on $ComputerName $_`r`n")
        return
    }

    # Scan extensions for each user
    foreach ($profilePath in $profileKeys) {
        $remotePath = "\\$ComputerName\$($profilePath.Replace(':', '$'))\AppData\Local\Google\Chrome\User Data\Default\Extensions"
        if (Test-Path $remotePath) {
            try {
                $manifestFiles = Get-ChildItem -Path $remotePath -Recurse -Filter "manifest.json" -ErrorAction SilentlyContinue
                foreach ($manifestFile in $manifestFiles) {
                    try {
                        $manifest = Get-Content -Path $manifestFile.FullName -Raw | ConvertFrom-Json
                        $allExtensions += [PSCustomObject]@{
                            User        = Split-Path -Path $profilePath -Leaf
                            Name        = $manifest.name
                            Version     = $manifest.version
                            Description = $manifest.description
                            ID          = $manifestFile.Directory.Name
                        }
                    } catch {
                        $outputBox.AppendText("Error parsing manifest.json for $profilePath $_`r`n")
                    }
                }
            } catch {
                $outputBox.AppendText("Error accessing extensions directory for $profilePath $_`r`n")
            }
        } else {
            $outputBox.AppendText("Extensions directory not found for $profilePath $remotePath`r`n")
        }
    }

    # Generate HTML report
    $htmlContent = @"
<!DOCTYPE html>
<html>
<head>
    <title>$ReportTitle</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #333; }
        table { border-collapse: collapse; width: 100%; margin-top: 20px; }
        th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <h1>$ReportTitle</h1>
    <p><strong>Computer Name:</strong> $ComputerName</p>
    <p><strong>Date/Time:</strong> $CurrentDate</p>
    <table>
        <thead>
            <tr>
                <th>User</th>
                <th>Name</th>
                <th>Version</th>
                <th>Description</th>
                <th>ID</th>
            </tr>
        </thead>
        <tbody>
"@

    foreach ($ext in $allExtensions) {
        $htmlContent += @"
        <tr>
            <td>$($ext.User)</td>
            <td>$($ext.Name)</td>
            <td>$($ext.Version)</td>
            <td>$($ext.Description)</td>
            <td>$($ext.ID)</td>
        </tr>
"@
    }

    $htmlContent += @"
        </tbody>
    </table>
</body>
</html>
"@

    # Save the report
    try {
        $htmlContent | Out-File -FilePath $ReportFilePath -Encoding UTF8
        $outputBox.AppendText("Report generated successfully: $ReportFilePath`r`n")
    } catch {
        $outputBox.AppendText("Error saving report: $_`r`n")
    }
}

 






###############################################################################################################################################################################


function COMPUTERACCOUNTS {

  $msgBox = $wshell.Popup("This will search for user account **FOLDERS** that are present from a specified list of computers.`r`n`n (It will not display a user list.) `r`n`n  If you would like more specific information, select the *User Acccounts* button instead.  `r`n`n CLICK *OK* TO SELECT YOUR LIST NOW!`r`n`n`r`n`n (This button is helpful if you believe someone is logging in with a local account or to see which computers a person has actually logged onto.)")


  $outputBox.AppendText("`r`n`n`r Opening Computer Account Tool... `r`n`r`n" + [Environment]::NewLine)
  Add-Type -AssemblyName System.Windows.Forms

  # Function to select a file using a file dialog
  function Get-FileDialog {
    $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $openFileDialog.Title = "Select File"
    $openFileDialog.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*"
    $openFileDialog.Multiselect = $false
    $OpenFileDialog.initialDirectory = "Y:\00 Powershell EXE\School Computer Lists"


    if ($openFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
      return $openFileDialog.FileName
    } else {
      return $null
    }
  }

  # Function to check if a computer is online by pinging it
  function Test-ComputerOnline {
    param (
      [string]$computer
    )

    $ping = Test-Connection -ComputerName $computer -Count 1 -Quiet
    return $ping
  }

  # Prompt to select a file containing computer names
  $computersFile = Get-FileDialog
  if (-not $computersFile) {
    $outputBox.AppendText("`r`n`n`r No file selected. Exiting. `r`n`r`n" + [Environment]::NewLine)
    exit
  }

  # Read computer names from the selected file
  $computers = Get-Content -Path $computersFile

  # Create a form
  $form = New-Object System.Windows.Forms.Form
  $form.Text = "Enter Username"
  $form.Size = New-Object System.Drawing.Size(300, 150)
  $form.StartPosition = "CenterScreen"

  # Create a label
  $label = New-Object System.Windows.Forms.Label
  $label.Location = New-Object System.Drawing.Point(10, 20)
  $label.Size = New-Object System.Drawing.Size(280, 30)
  $label.Text = "Enter the Number/Username to search for:"
  $form.Controls.Add($label)

  # Create a text box
  $textbox = New-Object System.Windows.Forms.TextBox
  $textbox.Location = New-Object System.Drawing.Point(10, 50)
  $textbox.Size = New-Object System.Drawing.Size(260, 30)
  $form.Controls.Add($textbox)

  # Create a button
  $button = New-Object System.Windows.Forms.Button
  $button.Location = New-Object System.Drawing.Point(90, 80)
  $button.Size = New-Object System.Drawing.Size(100, 30)
  $button.Text = "Search"
  $button.forecolor = "white"
  $button.backcolor = "darkred"
  $button.DialogResult = [System.Windows.Forms.DialogResult]::OK
  $form.Controls.Add($button)

  # Add event handler for button click
  $button.Add_Click({
      $global:username = $textbox.Text
      $form.Close()
  })

  # Show the form
  $form.ShowDialog() | Out-Null

  # Use the entered username
  $username = $global:username

  # Create an empty array to store results
  $results = @()

  # Script block to check if a user folder exists on a computer
  $scriptBlock = {
    param (
      $Username
    )

    $userFolderExists = Test-Path -Path "C:\Users\$Username" -PathType Container
    return $userFolderExists
  }

  # Loop through each computer and check for the user folder
  foreach ($computer in $computers) {
    if (Test-ComputerOnline -computer $computer) {
      $outputBox.AppendText("Processing $computer..." + [Environment]::NewLine)
      $userFolderExists = Invoke-Command -ComputerName $computer -ScriptBlock $scriptBlock -ArgumentList $username
      if ($userFolderExists) {
        $results += [PSCustomObject]@{
          ComputerName = $computer
          UserName = $username
        }
      }
    } else {
      $outputBox.AppendText("`r`n`n`r Computer $computer is offline." + [Environment]::NewLine)
    }
  }

  # Create folder path for the report
  $desktopPath = [System.Environment]::GetFolderPath('Desktop')
  $folderPath = Join-Path -Path $desktopPath -ChildPath "TREX REPORTS"
  if (-not (Test-Path $folderPath)) {
    New-Item -Path $folderPath -ItemType Directory | Out-Null
  }

  # Create text file
  $textFilePath = Join-Path -Path $folderPath -ChildPath "user_accounts_report.txt"

  # Output results to text file
  if ($results.Count -gt 0) {
    $results | ForEach-Object {
      "$($_.ComputerName), $($username), User Profile Folder FOUND!" | Out-File -FilePath $textFilePath -Append
    }

    $outputBox.AppendText("`r`n`n`r Results saved to $textFilePath `r`n`r`n" + [Environment]::NewLine)
  } else {
    $outputBox.AppendText("`r`n`n`r No user account found with the username '$username' on any of the specified computers. `r`n`r`n" + [Environment]::NewLine)
  }

}





# Load the necessary assembly for the pop-up box
#Add-Type -AssemblyName System.Windows.Forms



###############################################################################################################################################################################


#      "$script:globalComputerName"

###############################################################################################################################################################################



function ImageThumbnails {

  $outputBox.AppendText("`r`n`n`r Generating User Image Reports... `r`n`r`n" + [Environment]::NewLine)

  param (
    [string]$remoteComputerName = "$script:globalComputerName"
  )

  $networkPath = "\\$remoteComputerName\C$"

  # Define the path for the TREX folder on the local machine
  $localDesktop = [System.Environment]::GetFolderPath("Desktop")
  $trexFolder = Join-Path -Path $localDesktop -ChildPath "$remoteComputerName TREX REPORTS"

  # Create the TREX folder if it doesn't exist
  if (-not (Test-Path $trexFolder)) {
    New-Item -Path $trexFolder -ItemType Directory | Out-Null
  }

  Write-Output "Gathering user images in Downloads, Pictures folders, and Recycle Bin on $remoteComputerName"

  # Function to generate HTML for images in a directory
  function Generate-ImageHTML {
    param (
      [string]$directoryPath,
      [string]$sectionTitle
    )

    $htmlSectionContent = @"
<h2>$sectionTitle</h2>
<div id="thumbnails-container">
"@
    if (Test-Path $directoryPath) {
      $imageFiles = Get-ChildItem -Path $directoryPath -Recurse -File | Where-Object { $_.Extension -match '\.(jpg|jpeg|png|gif|tiff|webp|avif)' }
      foreach ($image in $imageFiles) {
        $imageName = $image.Name
        $imagePath = $image.FullName
        $imageBytes = [System.IO.File]::ReadAllBytes($imagePath)
        $base64Image = [System.Convert]::ToBase64String($imageBytes)
        $imageExtension = $image.Extension.TrimStart('.').ToLower()
        $imageDataUrl = "data:image/$imageExtension;base64,$base64Image"
        $thumbnailHtml = @"
<div class="thumbnail">
    <img src="$imageDataUrl" alt="$imageName" />
    <p>$imageName</p>
</div>
"@
        $htmlSectionContent += $thumbnailHtml
      }
      $htmlSectionContent += "</div>"
    }
    return $htmlSectionContent
  }

  # Function to get Recycle Bin path
  function Get-RecycleBinPath {
    $recycleBinPath = "$networkPath\Recycler" # This might vary, adjust as needed
    return $recycleBinPath
  }

  # Iterate through each user profile
  $userProfiles = Get-ChildItem -Path "$networkPath\Users" -Directory | Where-Object { $_.Name -ne "Default" -and $_.Name -ne "Public" }
  foreach ($userProfile in $userProfiles) {
    $username = $userProfile.Name

    $outputBox.AppendText("Generating User Image Report for $username... `r`n" + [Environment]::NewLine)

    # Get the paths to the user's Pictures and Downloads folders
    $picturesDirectory = Join-Path -Path $networkPath -ChildPath "Users\$username\Pictures"
    $downloadsDirectory = Join-Path -Path $networkPath -ChildPath "Users\$username\Downloads"

    # Set the filename for the HTML file
    $outputFileName = "$username IMAGE THUMBNAILS.html"
    $outputFile = Join-Path -Path $trexFolder -ChildPath $outputFileName

    # Get the current date and time
    $currentDateTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

    # Initialize HTML content
    $htmlContent = @"
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>TREX REPORT: $username's Image Report - Thumbnail</title>
<style>
.thumbnail {
    display: inline-block;
    text-align: center;
    margin: 10px;
}
.thumbnail img {
    max-width: 200px;
    max-height: 200px;
    border: 1px solid #ccc;
    padding: 5px;
    background-color: #f9f9f9;
}
</style>
</head>
<body>
<h1>TREX REPORT: $username's - IMAGE THUMBNAILS</h1>
<h2>Computer Name: $remoteComputerName</h2>
<p>Generated on: $currentDateTime</p>
"@

    # Generate HTML for Pictures and Downloads folders
    $htmlContent += Generate-ImageHTML -directoryPath $picturesDirectory -sectionTitle "Pictures Folder"
    $htmlContent += Generate-ImageHTML -directoryPath $downloadsDirectory -sectionTitle "Downloads Folder"

    # Add Recycle Bin to the report
    $recycleBinPath = Get-RecycleBinPath
    $htmlContent += Generate-ImageHTML -directoryPath $recycleBinPath -sectionTitle #"Recycle Bin"

    # Close HTML content
    $htmlContent += @"
</div>
</body>
</html>
"@

    # Save HTML content to output file in TREX folder
    $htmlContent | Out-File -FilePath $outputFile -Encoding UTF8

    # Output file location
    Write-Output "HTML file generated for $($userProfile.Name): $outputFile"
  }

  $outputBox.AppendText("`r`n`n`r Completed gathering images on $remoteComputerName `r`n`r`n" + [Environment]::NewLine)
   
}









###############################################################################################################################################################################
function REMOVEPIN {

    $RemotePC = "$script:globalComputerName"
    
    if (-not $RemotePC) {
        [System.Windows.Forms.MessageBox]::Show("Please enter a valid computer name.", "Error", "OK", "Error")
        return
    }

    $confirm = [System.Windows.Forms.MessageBox]::Show("WARNING: This will remove the Windows PIN and Biometrics on $RemotePC! `r`n`n This action CANNOT be undone.  Removing the pin this way can cause errors when trying to set up a new pin. Continue?`r`n`n (This will also RESTART the machine.)" , "Confirm Action", "YesNo", "Warning")

    if ($confirm -eq "Yes") {
        $OutputBox.AppendText("Removing PIN on $RemotePC..." + [Environment]::NewLine)

        try {
            $cmds = @(
                "cmd.exe /c takeown /F C:\Windows\ServiceProfiles\LocalService\AppData\Local\Microsoft\NGC /R /D Y",
                "cmd.exe /c icacls C:\Windows\ServiceProfiles\LocalService\AppData\Local\Microsoft\NGC /grant administrators:F /T",
                "cmd.exe /c rmdir /s /q C:\Windows\ServiceProfiles\LocalService\AppData\Local\Microsoft\NGC",
                "cmd.exe /c icacls C:\Windows\ServiceProfiles\LocalService\AppData\Local\Microsoft\NGC /reset /T /C /L",
                "cmd.exe /c icacls C:\Windows\ServiceProfiles\LocalService\AppData\Local\Microsoft\NGC /setowner SYSTEM /T /C /L",
                "cmd.exe /c secedit /configure /cfg %windir%\inf\defltbase.inf /db defltbase.sdb /verbose",

                 $OutputBox.AppendText("Removing BIOMETRICS on $RemotePC..." + [Environment]::NewLine)
                
                #Removing biometrics
              
                "cmd.exe /c net stop WbioSrvc /y",
                "cmd.exe /c takeown /F C:\Windows\System32\WinBioDatabase /R /D Y",
                "cmd.exe /c icacls C:\Windows\System32\WinBioDatabase /grant administrators:F /T",
                "cmd.exe /c rmdir /s /q C:\Windows\System32\WinBioDatabase",
                "cmd.exe /c icacls C:\Windows\System32\WinBioDatabase /reset /T /C /L",
                "cmd.exe /c icacls C:\Windows\System32\WinBioDatabase /setowner SYSTEM /T /C /L",
                "cmd.exe /c net start WbioSrvc"

                 $OutputBox.AppendText("Removal Attempt completed on $RemotePC..." + [Environment]::NewLine)

                "shutdown /r /t 10 /f"
            )

            foreach ($cmd in $cmds) {
                wmic /node:$RemotePC process call create $cmd | Out-Null
            }

            $OutputBox.AppendText("PIN removal process started on $RemotePC. `r`n`n Restarting system in 10 seconds..." + [Environment]::NewLine)
        } catch {
            $OutputBox.AppendText("Error executing commands: $_" + [Environment]::NewLine)
        }
    } else {
        $OutputBox.AppendText("Operation cancelled." + [Environment]::NewLine)
    }
}



###############################################################################################################################################################################
###############################################################################################################################################################################

###############################################################################################################################################################################



#######      END OF BUTTON FUNCTIONS       #######
##################################################


###################VERSION BUTTON######################

function VER {
  #logAction "CURRENT VERSION BUTTON PRESSED - Program Created by ©Josh Hochstettler."
  $msgBoxInput = $wshell.Popup("T-REX Rapid Response - Created by Josh Hochstettler", 0, "Confirm", 0)
}

#######################################################


################## GUI Form BUTTONS ##################################################




#QUICK REPORT
$QUICKREPORT = New-Object system.Windows.Forms.Button
$QUICKREPORT.Text = "Quick Report"  
$QUICKREPORT.ForeColor = "black"
$QUICKREPORT.Backcolor = "limegreen"   
$QUICKREPORT.width = 50
$QUICKREPORT.height = 50
$QUICKREPORT.location = New-Object System.Drawing.Point(10,200) #Horizontal, Vertical
$QUICKREPORT.Font = 'Microsoft Sans Serif,7'
$QUICKREPORT.Add_Click( { QUICKREPORT })
#$Form.Controls.Add($QUICKREPORT)

#Event VIEWER Button
$EVENTVIEWER = New-Object system.Windows.Forms.Button
$EVENTVIEWER.Text = "EVENT VIEWER REPORT"  
$EVENTVIEWER.ForeColor = "black"
$EVENTVIEWER.Backcolor = "white"   
$EVENTVIEWER.width = 70
$EVENTVIEWER.height = 50
$EVENTVIEWER.location = New-Object System.Drawing.Point(490, 650) #Horizontal, Vertical
$EVENTVIEWER.Font = 'Microsoft Sans Serif,8'
$EVENTVIEWER.Add_Click( { EVENTVIEWER })
$Form.Controls.Add($EVENTVIEWER)


#PC Images Button
$ImageThumbnails = New-Object system.Windows.Forms.Button
$ImageThumbnails.Text = "PC Images"  
$ImageThumbnails.ForeColor = "black"
$ImageThumbnails.Backcolor = "white"   
$ImageThumbnails.width = 70
$ImageThumbnails.height = 50
$ImageThumbnails.location = New-Object System.Drawing.Point(570, 650) #Horizontal, Vertical
$ImageThumbnails.Font = 'Microsoft Sans Serif,8'
$ImageThumbnails.Add_Click( { ImageThumbnails })
$Form.Controls.Add($ImageThumbnails)


#Machine Report Button
$MACHINEREPORT = New-Object system.Windows.Forms.Button
$MACHINEREPORT.Text = "RUN ALL REPORTS"  
$MACHINEREPORT.ForeColor = "black"
$MACHINEREPORT.Backcolor = "yellow"   
$MACHINEREPORT.width = 165
$MACHINEREPORT.height = 24
$MACHINEREPORT.location = New-Object System.Drawing.Point(70, 200) #Horizontal, Vertical
$MACHINEREPORT.Font = 'Microsoft Sans Serif,9'
$MACHINEREPORT.Add_Click( { MACHINEREPORT })
$Form.Controls.Add($MACHINEREPORT)

#PC INFO Button
$PCINFO = New-Object system.Windows.Forms.Button
$PCINFO.Text = "PC INFORMATION"  
$PCINFO.ForeColor = "black"
$PCINFO.Backcolor = "whitesmoke"   
$PCINFO.width = 165
$PCINFO.height = 24
$PCINFO.location = New-Object System.Drawing.Point(70, 240) #Horizontal, Vertical
$PCINFO.Font = 'Microsoft Sans Serif,8'
$PCINFO.Add_Click( { PCINFO })
$Form.Controls.Add($PCINFO)

#LOCAL ACCOUNTS Button
$LOCALACCOUNTS = New-Object system.Windows.Forms.Button
$LOCALACCOUNTS.Text = "USER ACCOUNTS"  
$LOCALACCOUNTS.ForeColor = "black"
$LOCALACCOUNTS.Backcolor = "whitesmoke"   
$LOCALACCOUNTS.width = 165
$LOCALACCOUNTS.height = 24
$LOCALACCOUNTS.location = New-Object System.Drawing.Point(70, 280) #Horizontal, Vertical
$LOCALACCOUNTS.Font = 'Microsoft Sans Serif,8'
$LOCALACCOUNTS.Add_Click( { LOCALACCOUNTS })
$Form.Controls.Add($LOCALACCOUNTS)


#FIREWALL RULES BUTTON
$FIREWALLRULES = New-Object system.Windows.Forms.Button
$FIREWALLRULES.Text = "FIREWALL RULES"  
$FIREWALLRULES.ForeColor = "black"
$FIREWALLRULES.Backcolor = "whitesmoke"   
$FIREWALLRULES.width = 165
$FIREWALLRULES.height = 24
$FIREWALLRULES.location = New-Object System.Drawing.Point(70, 320) #Horizontal, Vertical
$FIREWALLRULES.Font = 'Microsoft Sans Serif,8'
$FIREWALLRULES.Add_Click( { FIREWALLRULES })
$Form.Controls.Add($FIREWALLRULES)

#LOCAL ACCOUNTS Button
$NETSTATCONNECTIONS = New-Object system.Windows.Forms.Button
$NETSTATCONNECTIONS.Text = "TCP CONNECTIONS"  
$NETSTATCONNECTIONS.ForeColor = "black"
$NETSTATCONNECTIONS.Backcolor = "whitesmoke"   
$NETSTATCONNECTIONS.width = 165
$NETSTATCONNECTIONS.height = 24
$NETSTATCONNECTIONS.location = New-Object System.Drawing.Point(70, 360) #Horizontal, Vertical
$NETSTATCONNECTIONS.Font = 'Microsoft Sans Serif,8'
$NETSTATCONNECTIONS.Add_Click( { NETSTATCONNECTIONS })
$Form.Controls.Add($NETSTATCONNECTIONS)

#LOCAL ACCOUNTS Button
$LogonReport = New-Object system.Windows.Forms.Button
$LogonReport.Text = "LOGON REPORT"  
$LogonReport.ForeColor = "black"
$LogonReport.Backcolor = "whitesmoke"   
$LogonReport.width = 165
$LogonReport.height = 24
$LogonReport.location = New-Object System.Drawing.Point(70, 400) #Horizontal, Vertical
$LogonReport.Font = 'Microsoft Sans Serif,8'
$LogonReport.Add_Click( { LogonReport })
$Form.Controls.Add($LogonReport)


#ANTIVIRUS STATUS Button
$ANTIVIRUS = New-Object system.Windows.Forms.Button
$ANTIVIRUS.Text = "ANTIVIRUS STATUS"  
$ANTIVIRUS.ForeColor = "black"
$ANTIVIRUS.Backcolor = "whitesmoke"   
$ANTIVIRUS.width = 165
$ANTIVIRUS.height = 24
$ANTIVIRUS.location = New-Object System.Drawing.Point(70, 440) #Horizontal, Vertical
$ANTIVIRUS.Font = 'Microsoft Sans Serif,8'
$ANTIVIRUS.Add_Click( { ANTIVIRUS })
$Form.Controls.Add($ANTIVIRUS)


#WEB HISTORY Button
$WEBHISTORY = New-Object system.Windows.Forms.Button
$WEBHISTORY.Text = "WEB HISTORY"  
$WEBHISTORY.ForeColor = "black"
$WEBHISTORY.Backcolor = "whitesmoke"   
$WEBHISTORY.width = 165
$WEBHISTORY.height = 24
$WEBHISTORY.location = New-Object System.Drawing.Point(70, 480) #Horizontal, Vertical
$WEBHISTORY.Font = 'Microsoft Sans Serif,8'
$WEBHISTORY.Add_Click( { WEBHISTORY })
$Form.Controls.Add($WEBHISTORY)

#GPRESULT Button
$CheckMaliciousScripts = New-Object system.Windows.Forms.Button
$CheckMaliciousScripts.Text = "SCRIPT CHECK"  
$CheckMaliciousScripts.ForeColor = "black"
$CheckMaliciousScripts.Backcolor = "whitesmoke"   
$CheckMaliciousScripts.width = 165
$CheckMaliciousScripts.height = 24
$CheckMaliciousScripts.location = New-Object System.Drawing.Point(70, 520) #Horizontal, Vertical
$CheckMaliciousScripts.Font = 'Microsoft Sans Serif,8'
$CheckMaliciousScripts.Add_Click( { CheckMaliciousScripts })
$Form.Controls.Add($CheckMaliciousScripts)


#Scheduled Tasks Button
$SCHEDULEDTASKS = New-Object system.Windows.Forms.Button
$SCHEDULEDTASKS.Text = "SCHEDULED TASKS"  
$SCHEDULEDTASKS.ForeColor = "black"
$SCHEDULEDTASKS.Backcolor = "whitesmoke"   
$SCHEDULEDTASKS.width = 165
$SCHEDULEDTASKS.height = 24
$SCHEDULEDTASKS.location = New-Object System.Drawing.Point(70, 560) #Horizontal, Vertical
$SCHEDULEDTASKS.Font = 'Microsoft Sans Serif,8'
$SCHEDULEDTASKS.Add_Click( { SCHEDULEDTASKS })
$Form.Controls.Add($SCHEDULEDTASKS)


#INSTALLED SOFTWARE Button
$INSTALLEDSOFTWARE = New-Object system.Windows.Forms.Button
$INSTALLEDSOFTWARE.Text = "INSTALLED SOFTWARE"  
$INSTALLEDSOFTWARE.ForeColor = "black"
$INSTALLEDSOFTWARE.Backcolor = "whitesmoke"   
$INSTALLEDSOFTWARE.width = 165
$INSTALLEDSOFTWARE.height = 24
$INSTALLEDSOFTWARE.location = New-Object System.Drawing.Point(70, 600) #Horizontal, Vertical
$INSTALLEDSOFTWARE.Font = 'Microsoft Sans Serif,7'
$INSTALLEDSOFTWARE.Add_Click( { INSTALLEDSOFTWARE })
$Form.Controls.Add($INSTALLEDSOFTWARE)

#USB DEVICE Button
$USBDEVICE = New-Object system.Windows.Forms.Button
$USBDEVICE.Text = "USB DEVICE REPORT"  
$USBDEVICE.ForeColor = "black"
$USBDEVICE.Backcolor = "whitesmoke"   
$USBDEVICE.width = 165
$USBDEVICE.height = 24
$USBDEVICE.location = New-Object System.Drawing.Point(250, 600) #Horizontal, Vertical
$USBDEVICE.Font = 'Microsoft Sans Serif,8'
$USBDEVICE.Add_Click( { USBDEVICE })
$Form.Controls.Add($USBDEVICE)


#GPRESULT Button
$STARTUP = New-Object system.Windows.Forms.Button
$STARTUP.Text = "STARTUP"  
$STARTUP.ForeColor = "black"
$STARTUP.Backcolor = "whitesmoke"   
$STARTUP.width = 165
$STARTUP.height = 24
$STARTUP.location = New-Object System.Drawing.Point(250, 560) #Horizontal, Vertical
$STARTUP.Font = 'Microsoft Sans Serif,8'
$STARTUP.Add_Click( { STARTUP })
$Form.Controls.Add($STARTUP)




#Disable Network Connections Button
$DISABLENETWORK = New-Object system.Windows.Forms.Button
$DISABLENETWORK.Text = "DISABLE NETWORK"  
$DISABLENETWORK.ForeColor = "white"
$DISABLENETWORK.Backcolor = "firebrick"   
$DISABLENETWORK.width = 165
$DISABLENETWORK.height = 24
$DISABLENETWORK.location = New-Object System.Drawing.Point(430, 600) #Horizontal, Vertical
$DISABLENETWORK.Font = 'Microsoft Sans Serif,8'
$DISABLENETWORK.Add_Click( { DISABLENETWORK })
$Form.Controls.Add($DISABLENETWORK)


#Enable Remote C Button
$REMOTEC = New-Object system.Windows.Forms.Button
$REMOTEC.Text = "Remote C:"  
$REMOTEC.ForeColor = "black"
$REMOTEC.Backcolor = "whitesmoke"   
$REMOTEC.width = 110
$REMOTEC.height = 40
$REMOTEC.location = New-Object System.Drawing.Point(620, 595) #Horizontal, Vertical
$REMOTEC.Font = 'Microsoft Sans Serif,8'
$REMOTEC.Add_Click( { REMOTEC })
$Form.Controls.Add($REMOTEC)


#Enable Shutdown PC Button
$SHUTDOWNPC = New-Object system.Windows.Forms.Button
$SHUTDOWNPC.Text = "SHUTDOWN PC"  
$SHUTDOWNPC.ForeColor = "black"
$SHUTDOWNPC.Backcolor = "whitesmoke"   
$SHUTDOWNPC.width = 110
$SHUTDOWNPC.height = 40
$SHUTDOWNPC.location = New-Object System.Drawing.Point(620, 550) #Horizontal, Vertical
$SHUTDOWNPC.Font = 'Microsoft Sans Serif,7'
$SHUTDOWNPC.Add_Click( { SHUTDOWNPC })
$Form.Controls.Add($SHUTDOWNPC)


#Enable Ping Button
$MAINPING = New-Object system.Windows.Forms.Button
$MAINPING.Text = "PING"  
$MAINPING.ForeColor = "white"
$MAINPING.Backcolor = "blue"   
$MAINPING.width = 110
$MAINPING.height = 40
$MAINPING.location = New-Object System.Drawing.Point(620, 505) #Horizontal, Vertical
$MAINPING.Font = 'Microsoft Sans Serif,8'
$MAINPING.Add_Click( { MAINPING })
$Form.Controls.Add($MAINPING)


#Enable Chrome Extension Button
$Browserext = New-Object system.Windows.Forms.Button
$Browserext.Text = "Chrome Extension"  
$Browserext.ForeColor = ""
$Browserext.Backcolor = ""   
$Browserext.width = 125
$Browserext.height = 40
$Browserext.location = New-Object System.Drawing.Point(660, 220) #Horizontal, Vertical
$Browserext.Font = 'Microsoft Sans Serif,8'
$Browserext.Add_Click( { Browserext })
$Form.Controls.Add($Browserext)

#Enable Downloaded files Button
$UserDownloads = New-Object system.Windows.Forms.Button
$UserDownloads.Text = "User Downloads"  
$UserDownloads.ForeColor = ""
$UserDownloads.Backcolor = ""   
$UserDownloads.width = 125
$UserDownloads.height = 40
$UserDownloads.location = New-Object System.Drawing.Point(660, 270) #Horizontal, Vertical
$UserDownloads.Font = 'Microsoft Sans Serif,8'
$UserDownloads.Add_Click( { UserDownloads })
$Form.Controls.Add($UserDownloads)


#Enable Remove Windows Pin/Biometrics Button
$REMOVEPIN = New-Object system.Windows.Forms.Button
$REMOVEPIN.Text = "Remove Windows Pin/Biometrics"  
$REMOVEPIN.ForeColor = ""
$REMOVEPIN.Backcolor = ""   
$REMOVEPIN.width = 125
$REMOVEPIN.height = 40
$REMOVEPIN.location = New-Object System.Drawing.Point(660, 430) #Horizontal, Vertical
$REMOVEPIN.Font = 'Microsoft Sans Serif,8'
$REMOVEPIN.Add_Click( { REMOVEPIN })
$Form.Controls.Add($REMOVEPIN)





#WIFI PASSWORDS Button
$WIFINETWORK = New-Object system.Windows.Forms.Button
$WIFINETWORK.Text = "NETWORK REPORT"  
$WIFINETWORK.ForeColor = "black"
$WIFINETWORK.Backcolor = "withsmoke"   
$WIFINETWORK.width = 165
$WIFINETWORK.height = 24
$WIFINETWORK.location = New-Object System.Drawing.Point(250, 520) #Horizontal, Vertical
$WIFINETWORK.Font = 'Microsoft Sans Serif,8'
$WIFINETWORK.Add_Click( { WIFINETWORK })
$Form.Controls.Add($WIFINETWORK)



#RUNNING PROCESSES Button
$RUNNINGPROCESS = New-Object system.Windows.Forms.Button
$RUNNINGPROCESS.Text = "RUNNING PROCESSES"  
$RUNNINGPROCESS.ForeColor = "black"
$RUNNINGPROCESS.Backcolor = "whitesmoke"   
$RUNNINGPROCESS.width = 165
$RUNNINGPROCESS.height = 24
$RUNNINGPROCESS.location = New-Object System.Drawing.Point(430, 520) #Horizontal, Vertical
$RUNNINGPROCESS.Font = 'Microsoft Sans Serif,7'
$RUNNINGPROCESS.Add_Click( { RUNNINGPROCESS })
$Form.Controls.Add($RUNNINGPROCESS)

#RUNNING PROCESSES Button
$COMPUTERACCOUNTS = New-Object system.Windows.Forms.Button
$COMPUTERACCOUNTS.Text = "COMPUTER ACCOUNTS"  
$COMPUTERACCOUNTS.ForeColor = "white"
$COMPUTERACCOUNTS.Backcolor = "black"   
$COMPUTERACCOUNTS.width = 165
$COMPUTERACCOUNTS.height = 24
$COMPUTERACCOUNTS.location = New-Object System.Drawing.Point(430, 560) #Horizontal, Vertical
$COMPUTERACCOUNTS.Font = 'Microsoft Sans Serif,8'
$COMPUTERACCOUNTS.Add_Click( { COMPUTERACCOUNTS })
$Form.Controls.Add($COMPUTERACCOUNTS)






#############################################################################################
#                                  RIGHT SIDE BUTTONS                                       #
#############################################################################################



#PC INFO Button
$FileInfo = New-Object system.Windows.Forms.Button
$FileInfo.Text = "File Info"  
$FileInfo.ForeColor = "black"
$FileInfo.Backcolor = "whitesmoke"   
$FileInfo.width = 165
$FileInfo.height = 24
$FileInfo.location = New-Object System.Drawing.Point(660, 280) #Horizontal, Vertical
$FileInfo.Font = 'Microsoft Sans Serif,8'
$FileInfo.Add_Click( { FileInfo })
#$Form.Controls.Add($FileInfo)



#############################################################################################
#                BOTTOM ROW BUTTONS                                                         #
#############################################################################################


#MAC Vendor Information Button
$MACINFO = New-Object system.Windows.Forms.Button
$MACINFO.Text = "MAC Vendor"  
$MACINFO.ForeColor = "black"   
$MACINFO.BackColor = "lightblue"
$MACINFO.width = 110
$MACINFO.height = 24
$MACINFO.location = New-Object System.Drawing.Point(10, 650) #horizontal, vertical
$MACINFO.Font = 'Microsoft Sans Serif,8'
$MACINFO.Add_Click( { MACINFO })
$Form.Controls.Add($MACINFO)

#Tiny URL Check Tool Button
$TINYURL = New-Object system.Windows.Forms.Button
$TINYURL.Text = "URL Check"  
$TINYURL.ForeColor = "black"   
$TINYURL.BackColor = "lightgreen"
$TINYURL.width = 110
$TINYURL.height = 24
$TINYURL.location = New-Object System.Drawing.Point(130, 650) #horizontal, vertical
$TINYURL.Font = 'Microsoft Sans Serif,8'
$TINYURL.Add_Click( { TINYURL })
$Form.Controls.Add($TINYURL)

#File Hash Check Tool Button
$HASH = New-Object system.Windows.Forms.Button
$HASH.Text = "Hash Check"  
$HASH.ForeColor = "black"   
$HASH.BackColor = "darkorchid"
$HASH.width = 110
$HASH.height = 24
$HASH.location = New-Object System.Drawing.Point(250, 650) #horizontal, vertical
$HASH.Font = 'Microsoft Sans Serif,8'
$HASH.Add_Click( { HASH })
$Form.Controls.Add($HASH)

$WHOIS = New-Object system.Windows.Forms.Button
$WHOIS.Text = "WHOIS"  
$WHOIS.ForeColor = "black"   
$WHOIS.BackColor = "forestgreen"
$WHOIS.width = 110
$WHOIS.height = 24
$WHOIS.location = New-Object System.Drawing.Point(370, 650) #horizontal, vertical
$WHOIS.Font = 'Microsoft Sans Serif,8'
$WHOIS.Add_Click( { WHOIS })
$Form.Controls.Add($WHOIS)







######################################################################################
$SQLVIEWDOWNLOAD = New-Object system.Windows.Forms.Button
$SQLVIEWDOWNLOAD.Text = "DB Browser for SQLite DOWNLOAD (Non-Affiliated Link.)"  
$SQLVIEWDOWNLOAD.ForeColor = "black"   
$SQLVIEWDOWNLOAD.BackColor = "forestgreen"
$SQLVIEWDOWNLOAD.width = 200
$SQLVIEWDOWNLOAD.height = 65
$SQLVIEWDOWNLOAD.location = New-Object System.Drawing.Point(10, 730) #horizontal, vertical
$SQLVIEWDOWNLOAD.Font = 'Microsoft Sans Serif,9'
$SQLVIEWDOWNLOAD.Add_Click( { SQLVIEWDOWNLOAD })
$Form.Controls.Add($SQLVIEWDOWNLOAD)


function SQLVIEWDOWNLOAD {
Start-Process "chrome.exe" -ArgumentList "https://sqlitebrowser.org/"


}


#SQL VIEWER Button
$SQLVIEWER = New-Object system.Windows.Forms.Button
$SQLVIEWER.Text = "SQL VIEW"  
$SQLVIEWER.ForeColor = "black"
$SQLVIEWER.Backcolor = "white"   
$SQLVIEWER.width = 100
$SQLVIEWER.height = 35
$SQLVIEWER.location = New-Object System.Drawing.Point(250, 750) #Horizontal, Vertical
$SQLVIEWER.Font = 'Microsoft Sans Serif,8'
$SQLVIEWER.Add_Click( { SQLVIEWER })
$Form.Controls.Add($SQLVIEWER)

function SQLVIEWER {

  ii "Y:\00 Powershell EXE\Misc Powershell EXE\SQLiteDatabaseBrowserPortable\SQLiteDatabaseBrowserPortable.exe"

}

#SQL Query Button
$SQLQUERY = New-Object system.Windows.Forms.Button
$SQLQUERY.Text = "SQL QUERY"  
$SQLQUERY.ForeColor = "black"
$SQLQUERY.Backcolor = "white"   
$SQLQUERY.width = 100
$SQLQUERY.height = 35
$SQLQUERY.location = New-Object System.Drawing.Point(370, 750) #Horizontal, Vertical
$SQLQUERY.Font = 'Microsoft Sans Serif,8'
$SQLQUERY.Add_Click( { SQLQUERY })
$Form.Controls.Add($SQLQUERY)



function SQLQUERY {
    # Define the SQL query
    $query = @"
SELECT 
    'Browsing' AS type,
    urls.url AS item, 
    datetime(visits.visit_time/1000000-11644473600, 'unixepoch', '-7 hours') as visit_time
FROM 
    visits
JOIN 
    urls ON visits.url = urls.id

UNION ALL

SELECT 
    'Download' AS type,
    downloads.target_path AS item, 
    datetime(downloads.start_time/1000000-11644473600, 'unixepoch', '-7 hours') as visit_time
FROM 
    downloads

ORDER BY 
    visit_time ASC;
"@

    # Copy the query to the clipboard
    $query | Set-Clipboard

    # Create the message for the pop-up box
    $message = "Open the SQLite application and go to the Execute SQ Tab. Paste this query into the query input box and press the play button. (The query has been copied to your clipboard.)" + "`n`n" + $query
  # Load the necessary assemblies for the form and controls
    Add-Type -AssemblyName System.Windows.Forms
    Add-Type -AssemblyName System.Drawing

    # Create the form
    $form = New-Object Windows.Forms.Form
    $form.Text = "SQL Query Instructions"
    $form.Size = New-Object Drawing.Size(800, 600)
    $form.StartPosition = "CenterScreen"

    # Create a label for instructions
    $label = New-Object Windows.Forms.Label
    $label.Text = "Open the SQLite application and go to the sqlquery tab and paste this query into the tab and hit execute. (The query has been copied to your clipboard.)"
    $label.Size = New-Object Drawing.Size(750, 50)
    $label.Location = New-Object Drawing.Point(20, 20)
    $form.Controls.Add($label)

    # Create a TextBox to display the SQL query
    $textBox = New-Object Windows.Forms.TextBox
    $textBox.Multiline = $true
    $textBox.ReadOnly = $true
    $textBox.Text = $query
    $textBox.Size = New-Object Drawing.Size(750, 400)
    $textBox.Location = New-Object Drawing.Point(20, 80)
    $textBox.ScrollBars = "Vertical"
    $form.Controls.Add($textBox)

    # Create an OK button
    $okButton = New-Object Windows.Forms.Button
    $okButton.Text = "OK"
    $okButton.Location = New-Object Drawing.Point(350, 500)
    $okButton.Add_Click({ $form.Close() })
    $form.Controls.Add($okButton)

    # Show the form
    $form.ShowDialog()
    # Show the pop-up box
   # [System.Windows.Forms.MessageBox]::Show($message, "SQL Query Instructions", 'OK', [System.Windows.Forms.MessageBoxIcon]::Information)
}



######################################################################################



function SuspectPC {

  Add-Type -AssemblyName System.Windows.Forms

  # Create form
  $form = New-Object Windows.Forms.Form
  $form.Text = "SUSPECT"
  $form.Size = New-Object Drawing.Size(300, 150)
  $form.StartPosition = "CenterScreen"

  # Create label
  $label = New-Object Windows.Forms.Label
  $label.Location = New-Object Drawing.Point(10, 20)
  $label.Size = New-Object Drawing.Size(280, 20)
  $label.Text = "Enter Suspect Computer Name:"
  $form.Controls.Add($label)

  # Create textbox
  $textbox = New-Object Windows.Forms.TextBox
  $textbox.Location = New-Object Drawing.Point(10, 40)
  $textbox.Size = New-Object Drawing.Size(260, 20)
  $form.Controls.Add($textbox)

  # Create OK button
  $okButton = New-Object Windows.Forms.Button
  $okButton.Location = New-Object Drawing.Point(10, 70)
  $okButton.Size = New-Object Drawing.Size(75, 23)
  $okButton.Text = "OK"
  $okButton.DialogResult = [Windows.Forms.DialogResult]::OK
  $form.Controls.Add($okButton)

  # Show the form
  $result = $form.ShowDialog()

  # Check if OK button was clicked
  if ($result -eq [Windows.Forms.DialogResult]::OK) {
    # Retrieve entered computer name
    $script:globalComputerName = $textbox.Text

    # Ping the computer
    $pingResult = Test-Connection -ComputerName $script:globalComputerName -Count 2 -ErrorAction SilentlyContinue

    # Display the entered computer name and ping result
    if ($pingResult) {
      $outputBox.AppendText("`n`n`r Entered Computer Name: $script:globalComputerName `r`n`r`n  The Computer is: ONLINE" + [Environment]::NewLine)
    } else {
      $outputBox.AppendText("`n`n`r Entered Computer Name: $script:globalComputerName`r`n`r`n  The Computer is: OFFLINE - Can't Ping the system..." + [Environment]::NewLine)
    }
  }

  # Dispose of the form
  $form.Dispose()
}

# Run SuspectPC Function to get computer name before running any commands against it.
SuspectPC






#####################################################################
#                SUSPECT COMPUTER LABEL                             #     
#####################################################################
$formLabel = New-Object System.Windows.Forms.label
$formLabel.Location = New-Object System.Drawing.Point(250,175)
$formLabel.Size = New-Object System.Drawing.Size(580,25)
$formLabel.Font = New-Object System.Drawing.Font("arial","13",[System.Drawing.FontStyle]::Regular)
$formLabel.ForeColor = "RED"
$formLabel.BackColor = "black"
$formLabel.Text = "SUSPECT COMPUTER: $script:globalComputerName"
$form.Controls.Add($formLabel)
#####################################################################


#####################################################################
#Left Side Form Title Label
#####################################################################
$formLabel = New-Object System.Windows.Forms.label
$formLabel.Location = New-Object System.Drawing.Point(10,680)
$formLabel.Size = New-Object System.Drawing.Size(470,15)
$formLabel.Font = New-Object System.Drawing.Font("arial","10",[System.Drawing.FontStyle]::Regular)
$formLabel.ForeColor = "black"
$formLabel.BackColor = "gray"
$formLabel.Text = "            ▲                        ▲INVESTIGATION TOOLS▲                    ▲  "
$form.Controls.Add($formLabel)
#####################################################################



##Version Number Form Space
$VER = New-Object system.Windows.Forms.Button
$VER.Text = "v3.2"  
$VER.ForeColor = "black"
$VER.Backcolor = "whitesmoke"   
$VER.width = 50
$VER.height = 24
$VER.location = New-Object System.Drawing.Point(750, 770) #Horizontal, Vertical
$VER.Font = 'Microsoft Sans Serif,9'
$VER.Add_Click( { VER })
$Form.Controls.Add($VER)




#########################################################################################
#########################################################################################
#########################################################################################




####################################################################################
#END OF RIGHT SIDE APPLICATION
####################################################################################




# Check if the current user is an administrator


$currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
$currentUserPrincipal = New-Object Security.Principal.WindowsPrincipal($currentUser)
$isAdministrator = $currentUserPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

# Debug output
Write-Host "Current user is an administrator: $isAdministrator"

# If not an administrator, relaunch the script as an administrator
if (!$isAdministrator) {
  # Build the command to launch the script with elevated privileges
  $scriptPath = $MyInvocation.MyCommand.Path
  $arguments = "-File `"$scriptPath`""

  # Launch the new process with elevated privileges
  $process = New-Object System.Diagnostics.ProcessStartInfo
  $process.FileName = 'powershell.exe'
  $process.Arguments = $arguments
  $process.Verb = 'runas'

  # Debug output
  $msgBoxInput = $wshell.Popup("Since most of these actions require admin privilages, you must be an admin on the machine you are running this on, or launch from an administrative powershell session.  The program will attempt to elevate privilages now.", 0, "Confirm", 0x1)
  Write-Host "Relaunching application as an administrator..."

  # Start the process and wait for it to exit
  [System.Diagnostics.Process]::Start($process) | Out-Null
  exit
}












#################################################################################################


#######       RUN AS ADMIN CHECK       #######
#######     TURNED OFF BY DEFAULT       #######

############################################################
#                WELCOME MESSAGE TEXT                      #
############################################################

$outputBox.AppendText("`r`n`r`n`r`n`r`n WELCOME TO T-REX RAPID RESPONSE: `r`n`r`n ALL REPORTS WILL GENERATE THEIR OWN HTML FILE IN A FOLDER ON YOUR DESKTOP WITH THE COMPUTER NAME. `r`n`r`n  THIS WAS DESIGNED TO BE RAN AGAINST AN INFECTED OR SUSPECT MACHINE TO HELP GATHER INFORMATION ABOUT AN INCIDENT.`r`n`r`n GOOD LUCK THREAT HUNTING!`r`n`r`n - SHIFTY - `r`n`r`n`r`n`r`n" + [Environment]::NewLine)

############################################################


[void]$Form.ShowDialog()

